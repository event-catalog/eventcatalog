import { getNavigationItems } from '../../custom-docs';
import * as fs from 'node:fs';
import * as path from 'node:path';
import { getEntry } from 'astro:content';
import type { Mock } from 'jest-mock';

// Mock dependencies
jest.mock('node:fs');
jest.mock('node:path', () => ({
  ...jest.requireActual('node:path'),
  join: jest.fn().mockImplementation((...args: string[]) => args.join('/')),
}));
jest.mock('astro:content');
jest.mock('@config', () => ({
  default: {
    customDocs: {
      sidebar: [
        {
          label: 'Top Level',
          items: [
            { 
              label: 'Nested Level 1', 
              items: [
                { 
                  label: 'Auto Generated Nested',
                  autogenerated: { directory: 'nested/auto-gen' }
                }
              ] 
            },
          ]
        },
        {
          label: 'Top Level Auto Generated',
          autogenerated: { directory: 'top-level' }
        }
      ]
    }
  }
}));
jest.mock('gray-matter', () => ({
  __esModule: true,
  default: jest.fn().mockImplementation(() => ({ data: { title: 'Mocked Title' } })),
}));

describe('getNavigationItems with nested auto-generated items', () => {
  beforeEach(() => {
    // Clear all mocks
    jest.clearAllMocks();

    // Mock file system operations
    (fs.readdirSync as Mock).mockImplementation((dirPath) => {
      if (dirPath.includes('nested/auto-gen')) {
        return ['nested-file1.mdx', 'nested-file2.mdx'];
      }
      if (dirPath.includes('top-level')) {
        return ['top-file1.mdx', 'top-file2.mdx'];
      }
      return [];
    });

    (fs.readFileSync as Mock).mockReturnValue('---\ntitle: Test\n---\nContent');

    // Mock getEntry
    (getEntry as Mock).mockImplementation(async (collection, id) => {
      if (id.includes('nested-file1')) {
        return {
          data: { title: 'Nested File 1' },
          id: 'docs/nested/auto-gen/nested-file1',
        };
      }
      if (id.includes('nested-file2')) {
        return {
          data: { title: 'Nested File 2' },
          id: 'docs/nested/auto-gen/nested-file2',
        };
      }
      if (id.includes('top-file1')) {
        return {
          data: { title: 'Top File 1' },
          id: 'docs/top-level/top-file1',
        };
      }
      if (id.includes('top-file2')) {
        return {
          data: { title: 'Top File 2' },
          id: 'docs/top-level/top-file2',
        };
      }
      return undefined;
    });
  });

  test('should correctly process nested auto-generated items', async () => {
    // Set PROJECT_DIR environment variable
    process.env.PROJECT_DIR = '/fake/path';

    const result = await getNavigationItems();

    // Verify the structure matches our expectation
    expect(result).toEqual([
      {
        label: 'Top Level',
        items: [
          {
            label: 'Nested Level 1',
            items: [
              {
                label: 'Auto Generated Nested',
                items: [
                  { label: 'Nested File 1', slug: 'nested/auto-gen/nested-file1' },
                  { label: 'Nested File 2', slug: 'nested/auto-gen/nested-file2' },
                ],
              },
            ],
          },
        ],
      },
      {
        label: 'Top Level Auto Generated',
        items: [
          { label: 'Top File 1', slug: 'top-level/top-file1' },
          { label: 'Top File 2', slug: 'top-level/top-file2' },
        ],
      },
    ]);

    // Verify fs.readdirSync was called with the expected paths
    expect(fs.readdirSync).toHaveBeenCalledWith('/fake/path/docs/nested/auto-gen');
    expect(fs.readdirSync).toHaveBeenCalledWith('/fake/path/docs/top-level');
  });
}); 