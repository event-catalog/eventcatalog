---
import { getEntry, type CollectionEntry } from 'astro:content';
import PillListFlat from '@components/Lists/PillListFlat';
import OwnersList from '@components/Lists/OwnersList';
import type { CollectionMessageTypes } from '@types';
import * as path from 'path';
import VersionList from '@components/Lists/VersionList.astro';
import { buildUrl } from '@utils/url-builder';
import { FileDownIcon, ScrollText, Workflow } from 'lucide-react';
import RepositoryList from '@components/Lists/RepositoryList.astro';
interface Props {
  message: CollectionEntry<CollectionMessageTypes>;
}

const { message } = Astro.props;

const producers = (message.data.producers as CollectionEntry<'services'>[]) || [];
const consumers = (message.data.consumers as CollectionEntry<'services'>[]) || [];
const channels = (message.data.messageChannels as CollectionEntry<'channels'>[]) || [];

const ownersRaw = message.data?.owners || [];
const owners = await Promise.all(ownersRaw.map((o) => getEntry(o)));
const filteredOwners = owners.filter((o) => o !== undefined);

const producerList = producers.map((p) => ({
  label: `${p.data.name}`,
  tag: `v${p.data.version}`,
  collection: p.collection,
  href: buildUrl(`/docs/services/${p.data.id}/${p.data.version}`),
}));

const consumerList = consumers.map((p) => ({
  label: `${p.data.name}`,
  tag: `v${p.data.version}`,
  collection: p.collection,
  href: buildUrl(`/docs/services/${p.data.id}/${p.data.version}`),
}));

const ownersList = filteredOwners.map((o) => ({
  label: o.data.name,
  type: o.collection,
  badge: o.collection === 'users' ? o.data.role : 'Team',
  avatarUrl: o.collection === 'users' ? o.data.avatarUrl : '',
  href: buildUrl(`/docs/${o.collection}/${o.data.id}`),
}));

const channelList = channels.map((c) => ({
  label: `${c.data.name}`,
  tag: `v${c.data.version}`,
  collection: c.collection,
  href: buildUrl(`/docs/channels/${c.data.id}/${c.data.version}`),
}));

const getType = (type: string) => {
  switch (type) {
    case 'queries':
      return 'Query';
    default:
      return message.collection.slice(0, -1);
  }
};

const getProducerEmptyMessage = (type: string) => {
  const value = type.toLowerCase();
  switch (value) {
    case 'query':
    case 'command':
      return `This ${value} does not get invoked by any services.`;
    default:
      return `This ${value} does not get produced by any services.`;
  }
};

const getConsumerEmptyMessage = (type: string) => {
  const value = type.toLowerCase();
  switch (value) {
    case 'query':
    case 'command':
      return `This ${value} does not invoke any service.`;
    default:
      return `This ${value} does not get consumed by any services.`;
  }
};

const type = getType(message.collection);

// @ts-ignore
const publicPath = message?.catalog?.publicPath;
const schemaFilePath = message?.data?.schemaPath;
const schemaURL = path.join(publicPath, schemaFilePath || '');
---

<aside class="sticky top-28 left-0 space-y-8 h-full overflow-y-auto py-4">
  <div class="">
    {
      producerList.length > 0 && (
        <PillListFlat
          color="pink"
          title={`${type} Producers (${producerList.length})`}
          pills={producerList}
          emptyMessage={getProducerEmptyMessage(type)}
          client:load
        />
      )
    }
    {
      consumerList.length > 0 && (
        <PillListFlat
          color="pink"
          title={`${type} Consumers (${consumerList.length})`}
          pills={consumerList}
          emptyMessage={getConsumerEmptyMessage(type)}
          client:load
        />
      )
    }
    {
      channelList.length > 0 && (
        <PillListFlat color="pink" title={`Channels (${channelList.length})`} pills={channelList} client:load />
      )
    }

    {
      message.data.versions && (
        <VersionList
          title={`${type} versions (${message.data.versions?.length})`}
          versions={message.data.versions}
          collectionItem={message}
        />
      )
    }

    <OwnersList
      title={`${type} owners (${ownersList.length})`}
      owners={ownersList}
      emptyMessage={`This ${type} does not have any documented owners.`}
      client:load
    />

    {
      message.data.repository && (
        <RepositoryList repository={message.data.repository?.url} language={message.data.repository?.language} />
      )
    }

    <div class="space-y-2">
      {
        message?.data?.schemaPath && (
          <a
            href={buildUrl(schemaURL, true)}
            download={`${message.data.name}(${message.data.version})-${schemaFilePath}`}
            class="flex items-center justify-center space-x-2 text-center rounded-md w-full bg-white px-3.5 py-2.5 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-100/60 hover:text-primary"
          >
            <FileDownIcon strokeWidth={2} size={16} />
            <span>Download schema</span>
          </a>
        )
      }
      <a
        href={buildUrl(`/visualiser/${message.collection}/${message.data.id}/${message.data.version}`)}
        class="flex items-center justify-center space-x-2 text-center rounded-md w-full bg-white px-3.5 py-2.5 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-100/60 hover:text-primary"
      >
        <Workflow strokeWidth={2} size={16} />
        <span class="block">View in visualiser</span>
      </a>

      <a
        href={buildUrl(`/docs/${message.collection}/${message.data.id}/${message.data.latestVersion}/changelog`)}
        class="flex items-center space-x-2 justify-center text-center rounded-md w-full bg-white px-3.5 py-2.5 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-100/60 hover:text-primary"
      >
        <ScrollText strokeWidth={2} size={16} />
        <span class="block">Read changelog</span>
      </a>
    </div>
  </div>
</aside>
