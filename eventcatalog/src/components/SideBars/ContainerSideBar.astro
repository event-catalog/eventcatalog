---
import type { CollectionEntry } from 'astro:content';
import PillListFlat from '@components/Lists/PillListFlat';
import OwnersList from '@components/Lists/OwnersList';
import VersionList from '@components/Lists/VersionList.astro';
import { buildUrl } from '@utils/url-builder';
import { ScrollText, Workflow, RssIcon } from 'lucide-react';
import RepositoryList from '@components/Lists/RepositoryList.astro';
import { getOwner } from '@utils/collections/owners';
import CustomSideBarSectionList from '@components/Lists/CustomSideBarSectionList.astro';
import { isChangelogEnabled } from '@utils/feature';
import config from '@config';

interface Props {
  container: CollectionEntry<'containers'>;
}

const { container } = Astro.props;

const services = (container.data.services as CollectionEntry<'services'>[]) || [];
const ownersRaw = container.data?.owners || [];

const owners = await Promise.all<ReturnType<typeof getOwner>>(ownersRaw.map(getOwner));
const filteredOwners = owners.filter((o) => o !== undefined);
const resourceGroups = container.data?.resourceGroups || [];
const attachments = container.data.attachments || [];

const attachmentsList = attachments.map((a) => {
  const attachmentIsURL = typeof a === 'string';
  return {
    label: attachmentIsURL ? a : (a.title ?? a.url),
    href: attachmentIsURL ? a : a.url,
    icon: attachmentIsURL ? 'ExternalLinkIcon' : (a.icon ?? 'ExternalLinkIcon'),
    target: '_blank' as const,
    subgroup: attachmentIsURL ? undefined : (a.type ?? ''),
  };
});

const writesToList = container.data.servicesThatWriteToContainer.map((p) => ({
  label: p.data.name,
  tag: `v${p.data.version}`,
  collection: p.collection,
  href: buildUrl(`/docs/services/${p.data.id}/${p.data.version}`),
}));

const readsFromList = container.data.servicesThatReadFromContainer.map((p) => ({
  label: p.data.name,
  tag: `v${p.data.version}`,
  collection: p.collection,
  href: buildUrl(`/docs/services/${p.data.id}/${p.data.version}`),
}));

const ownersList = filteredOwners.map((o) => ({
  label: o.data.name,
  type: o.collection,
  badge: o.collection === 'users' ? o.data.role : 'Team',
  avatarUrl: o.collection === 'users' ? o.data.avatarUrl : '',
  href: buildUrl(`/docs/${o.collection}/${o.data.id}`),
}));

const shouldRenderSideBarSection = (section: string) => {
  if (!container.data.detailsPanel) {
    return true;
  }
  // @ts-ignore
  return container.data.detailsPanel[section]?.visible ?? true;
};

const isRSSEnabled = config.rss?.enabled;
---

<aside class="sticky top-28 left-0 space-y-8 h-full overflow-y-auto py-4">
  <div class="">
    {
      resourceGroups
        .filter((section) => section.items.length > 0 && section.sidebar)
        .map((section) => <CustomSideBarSectionList section={section} />)
    }
    {
      writesToList.length > 0 && shouldRenderSideBarSection('services') && (
        <PillListFlat
          color="pink"
          title={`Services (writes) (${writesToList.length})`}
          pills={writesToList}
          emptyMessage={'No services are using this resource.'}
          client:load
        />
      )
    }
    {
      readsFromList.length > 0 && shouldRenderSideBarSection('services') && (
        <PillListFlat
          color="pink"
          title={`Services (reads) (${readsFromList.length})`}
          pills={readsFromList}
          emptyMessage={'No services are using this resource.'}
          client:load
        />
      )
    }

    {
      container.data.versions && shouldRenderSideBarSection('versions') && (
        <VersionList
          title={`Versions (${container.data.versions?.length})`}
          versions={container.data.versions}
          collectionItem={container}
        />
      )
    }

    {
      container.data.attachments && shouldRenderSideBarSection('attachments') && (
        <PillListFlat
          title={`Attachments (${attachmentsList.length})`}
          pills={attachmentsList}
          emptyMessage={`This resource does not have any attachments.`}
          color="pink"
          client:load
        />
      )
    }

    {
      ownersList.length > 0 && shouldRenderSideBarSection('owners') && (
        <OwnersList
          title={`Owners (${ownersList.length})`}
          owners={ownersList}
          emptyMessage={`This resource does not have any documented owners.`}
          client:load
        />
      )
    }

    {
      container.data.repository && shouldRenderSideBarSection('repository') && (
        <RepositoryList repository={container.data.repository?.url} language={container.data.repository?.language} />
      )
    }

    {
      isRSSEnabled && (
        <div class="mx-auto pb-8 w-full max-w-lg divide-y divide-white/5 rounded-xl bg-white/5">
          <span class="text-sm text-black font-semibold group-data-[hover]:text-black/80 capitalize">Container RSS Feed</span>
          <ul role="list" class="space-y-2 mt-2">
            <li class="has-tooltip rounded-md text-gray-600 group px-1 w-full hover:bg-gradient-to-l hover:from-purple-500 hover:to-purple-700 hover:text-white hover:font-normal  ">
              <a class={`flex items-center space-x-2`} target="_blank" href={buildUrl(`/rss/${container.collection}/rss.xml`)}>
                <RssIcon className="h-4 w-4 text-gray-800 group-hover:text-white" strokeWidth={1} />
                <span class="font-light text-sm truncate">RSS Feed</span>
              </a>
            </li>
          </ul>
        </div>
      )
    }

    <div class="space-y-2">
      <a
        href={buildUrl(`/visualiser/${container.collection}/${container.data.id}/${container.data.version}`)}
        class="flex items-center justify-center space-x-2 text-center rounded-md w-full bg-white px-3.5 py-2.5 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-100/60 hover:text-primary"
      >
        <Workflow strokeWidth={2} size={16} />
        <span class="block">View in visualiser</span>
      </a>

      {
        isChangelogEnabled() && shouldRenderSideBarSection('changelog') && (
          <a
            href={buildUrl(`/docs/${container.collection}/${container.data.id}/${container.data.latestVersion}/changelog`)}
            class="flex items-center space-x-2 justify-center text-center rounded-md w-full bg-white px-3.5 py-2.5 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-100/60 hover:text-primary"
          >
            <ScrollText strokeWidth={2} size={16} />
            <span class="block">Read changelog</span>
          </a>
        )
      }
    </div>
  </div>
</aside>
