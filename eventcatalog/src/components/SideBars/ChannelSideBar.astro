---
import { getEntry, type CollectionEntry } from 'astro:content';
import PillListFlat from '@components/Lists/PillListFlat';
import ProtocolList from '@components/Lists/ProtocolList';
import OwnersList from '@components/Lists/OwnersList';
import VersionList from '@components/Lists/VersionList.astro';
import { buildUrl } from '@utils/url-builder';
import { ScrollText } from 'lucide-react';
import RepositoryList from '@components/Lists/RepositoryList.astro';

interface Props {
  channel: CollectionEntry<'channels'>;
}

const { channel } = Astro.props;

const ownersRaw = channel.data?.owners || [];
const owners = await Promise.all(ownersRaw.map((o) => getEntry(o)));
const filteredOwners = owners.filter((o) => o !== undefined);

const channelParameters: Record<string, { enum?: string[]; description?: string }> = channel.data.parameters || {};
const parameters = Object.keys(channelParameters).map((key) => ({
  key,
  ...channelParameters[key],
}));

const paramsList = parameters.map((param) => ({
  label: param.key,
  description: param?.description,
  collection: 'channels-parameter',
}));

const protocols = channel.data.protocols || [];
const protocolList = protocols.map((p) => ({
  label: p,
  collection: 'channels-protocol',
  // icon: p,
  icon: p,
}));

const ownersList = filteredOwners.map((o) => ({
  label: o.data.name,
  type: o.collection,
  badge: o.collection === 'users' ? o.data.role : 'Team',
  avatarUrl: o.collection === 'users' ? o.data.avatarUrl : '',
  href: buildUrl(`/docs/${o.collection}/${o.data.id}`),
}));

const messageList = (channel.data.messages ?? []).map((p) => ({
  label: p.name,
  badge: p.collection,
  color: p.collection === 'events' ? 'orange' : 'blue',
  collection: p.collection,
  tag: `v${p.version}`,
  href: buildUrl(`/docs/${p.collection}/${p.id}/${p.version}`),
}));
---

<aside class="sticky top-28 left-0 space-y-8 h-full overflow-y-auto py-4">
  <div class="">
    {
      messageList.length > 0 && (
        <PillListFlat
          title={`Messages using channel (${messageList.length})`}
          pills={messageList}
          emptyMessage={`This channel does not have any messages.`}
          color="orange"
          client:load
        />
      )
    }

    {
      protocolList.length > 0 && (
        <ProtocolList color="pink" title={`Protocols (${protocolList.length})`} pills={protocolList} client:load />
      )
    }

    {
      channel.data.versions && (
        <VersionList
          title={`Channel versions (${channel.data.versions?.length})`}
          versions={channel.data.versions}
          collectionItem={channel}
        />
      )
    }

    <OwnersList
      title={`Channel owners (${filteredOwners.length})`}
      owners={ownersList}
      emptyMessage={`This channel does not have any documented owners.`}
      client:load
    />

    {
      channel.data.repository && (
        <RepositoryList repository={channel.data.repository?.url} language={channel.data.repository?.language} />
      )
    }

    {
      paramsList.length > 0 && (
        <PillListFlat color="pink" title={`Channel parameters (${paramsList.length})`} pills={paramsList} client:load />
      )
    }

    <div class="space-y-2">
      <a
        href={buildUrl(`/docs/${channel.collection}/${channel.data.id}/${channel.data.latestVersion}/changelog`)}
        class="flex items-center space-x-2 justify-center text-center rounded-md w-full bg-white px-3.5 py-2.5 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-100/60 hover:text-primary"
      >
        <ScrollText strokeWidth={2} size={16} />
        <span class="block">Read changelog</span>
      </a>
    </div>
  </div>
</aside>
