---
import OwnersList from '@components/Lists/OwnersList';
import PillListFlat from '@components/Lists/PillListFlat';
import RepositoryList from '@components/Lists/RepositoryList.astro';
import SpecificationsList from '@components/Lists/SpecificationsList.astro';
import VersionList from '@components/Lists/VersionList.astro';
import { buildUrl } from '@utils/url-builder';
import { getEntry, type CollectionEntry } from 'astro:content';
import { ScrollText, Workflow, FileDownIcon, Code, Link } from 'lucide-react';
import { join } from 'node:path';
interface Props {
  service: CollectionEntry<'services'>;
}

const { service } = Astro.props;

// @ts-ignore
const sends = (service.data.sends as CollectionEntry<'events'>[]) || [];
// @ts-ignore
const receives = (service.data.receives as CollectionEntry<'events'>[]) || [];

const ownersRaw = service.data?.owners || [];
const owners = await Promise.all(ownersRaw.map((o) => getEntry(o)));
const filteredOwners = owners.filter((o) => o !== undefined);

const sendsList = sends.map((p) => ({
  label: p.data.name,
  badge: p.collection,
  color: p.collection === 'events' ? 'orange' : 'blue',
  collection: p.collection,
  tag: `v${p.data.version}`,
  href: buildUrl(`/docs/${p.collection}/${p.data.id}/${p.data.version}`),
}));
const receivesList = receives.map((p) => ({
  label: p.data.name,
  badge: p.collection,
  color: p.collection === 'events' ? 'orange' : 'blue',
  tag: `v${p.data.version}`,
  collection: p.collection,
  href: buildUrl(`/docs/${p.collection}/${p.data.id}/${p.data.version}`),
}));

const ownersList = filteredOwners.map((o) => ({
  label: o.data.name,
  type: o.collection,
  badge: o.collection === 'users' ? o.data.role : 'Team',
  avatarUrl: o.collection === 'users' ? o.data.avatarUrl : '',
  href: buildUrl(`/docs/${o.collection}/${o.data.id}`),
}));

// @ts-ignore
const publicPath = service?.catalog?.publicPath;
const schemaFilePath = service?.data?.schemaPath;
const schemaURL = join(publicPath, schemaFilePath || '');
---

<aside class="sticky top-28 left-0 h-full overflow-y-auto pr-6 py-4">
  <div id="sidebar-cta-portal" class="">
    <PillListFlat
      title={`Receives Messages (${receivesList.length})`}
      pills={receivesList}
      emptyMessage={`This service does not receive any messages.`}
      color="orange"
      client:load
    />
    <PillListFlat
      title={`Sends Messages (${sendsList.length})`}
      pills={sendsList}
      emptyMessage={`This service does not send any messages.`}
      color="orange"
      client:load
    />
    {service.data.versions && <VersionList versions={service.data.versions} collectionItem={service} />}

    {service.data.specifications && <SpecificationsList collectionItem={service} />}

    <OwnersList
      title={`Service owners (${ownersList.length})`}
      owners={ownersList}
      emptyMessage={`This service does not have any documented owners.`}
      client:load
    />

    {
      service.data.repository && (
        <RepositoryList repository={service.data.repository?.url} language={service.data.repository?.language} />
      )
    }

    <div class="space-y-2">
      {
        service?.data?.schemaPath && (
          <a
            href={buildUrl(schemaURL, true)}
            download={`${service.data.name}(${service.data.version})-${schemaFilePath}`}
            class="flex items-center justify-center space-x-2 text-center rounded-md w-full bg-white px-3.5 py-2.5 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-100/60 hover:text-primary"
          >
            <FileDownIcon strokeWidth={2} size={16} />
            <span>Download schema</span>
          </a>
        )
      }
      <a
        href={buildUrl(`/visualiser/${service.collection}/${service.data.id}/${service.data.version}`)}
        class="flex items-center justify-center space-x-2 text-center rounded-md w-full bg-white px-3.5 py-2.5 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-100/60 hover:text-primary"
      >
        <Workflow strokeWidth={2} size={16} />
        <span class="block">View in visualiser</span>
      </a>
      <a
        href={buildUrl(`/docs/${service.collection}/${service.data.id}/${service.data.latestVersion}/changelog`)}
        class="flex items-center space-x-2 justify-center text-center rounded-md w-full bg-white px-3.5 py-2.5 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-100/60 hover:text-primary"
      >
        <ScrollText strokeWidth={2} size={16} />
        <span class="block">Read changelog</span>
      </a>
    </div>
  </div>
</aside>
