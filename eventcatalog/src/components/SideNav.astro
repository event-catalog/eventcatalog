---
import { House, BookOpenText, Workflow, TableProperties } from 'lucide-react';
import { isCollectionVisibleInCatalog } from '@eventcatalog';
import { getDomains } from '@utils/collections/domains';
import { getFlows } from '@utils/collections/flows';
import { getServices } from '@utils/collections/services';
import { getCommands } from '@utils/commands';
import { getEvents } from '@utils/events';
import { hasLandingPageForDocs } from '@utils/pages';
import { getQueries } from '@utils/queries';
import { buildUrl } from '@utils/url-builder';

const [events, commands, queries, services, domains, flows] = await Promise.all([
  getEvents({ getAllVersions: false }),
  getCommands({ getAllVersions: false }),
  getQueries({ getAllVersions: false }),
  getServices({ getAllVersions: false }),
  getDomains({ getAllVersions: false }),
  getFlows({ getAllVersions: false }),
]);

const currentPath = Astro.url.pathname;

const catalogHasDefaultLandingPageForDocs = await hasLandingPageForDocs();

const getDefaultUrl = (route: string, defaultValue: string) => {
  const collections = [
    { data: domains, key: 'domains' },
    { data: services, key: 'services' },
    { data: events, key: 'events' },
    { data: commands, key: 'commands' },
    { data: queries, key: 'queries' },
    { data: flows, key: 'flows' },
  ];

  for (const { data, key } of collections) {
    if (data.length > 0 && isCollectionVisibleInCatalog(key)) {
      const item = data[0];
      return buildUrl(`/${route}/${key}/${item.data.id}/${item.data.latestVersion}`);
    }
  }

  return buildUrl(defaultValue);
};

const navigationItems = [
  {
    id: '/',
    label: 'Home',
    icon: House,
    href: buildUrl('/'),
    current: currentPath === '/',
    sidebar: false,
  },
  {
    id: '/docs',
    label: 'Documentation',
    icon: BookOpenText,
    href: catalogHasDefaultLandingPageForDocs ? buildUrl('/docs') : getDefaultUrl('docs', '/docs'),
    current: currentPath.includes('/docs'),
    sidebar: true,
  },
  {
    id: '/visualiser',
    label: 'Visualiser',
    icon: Workflow,
    href: getDefaultUrl('visualiser', '/visualiser'),
    current: currentPath.includes('/visualiser'),
    sidebar: true,
  },
  {
    id: '/discover',
    label: 'Explore',
    icon: TableProperties,
    href: buildUrl('/discover/events'),
    current: currentPath.includes('/discover/'),
    sidebar: false,
  },
];
---

<div
  id="eventcatalog-vertical-nav"
  class="sticky top-header shrink-0 flex flex-col items-center w-16 h-[calc(100vh-theme(spacing.header))] py-4 bg-white bg-gradient-to-b from-white to-gray-100 border-r border-gray-200 z-20 shadow-md justify-between"
>
  <nav class="flex flex-col h-full justify-between">
    <div class="flex flex-col items-center flex-1 space-y-8">
      {
        navigationItems.map((item) => {
          return (
            <a
              id={item.id}
              data-role="nav-item"
              href={item.href}
              data-active={item.current}
              data-sidebar={item.sidebar}
              class="p-1.5 inline-block transition-colors duration-200 rounded-lg data-[active=true]:text-white data-[active=true]:bg-gradient-to-b data-[active=true]:from-purple-500 data-[active=true]:to-purple-700 hover:data-[active=false]:bg-gradient-to-r hover:data-[active=false]:from-purple-500 hover:data-[active=false]:to-purple-700 hover:data-[active=false]:text-white data-[active=false]:text-gray-700"
            >
              <div class="has-tooltip">
                <span class="tooltip rounded shadow-lg p-1 text-xs bg-gradient-to-l from-purple-500 to-purple-700 text-white ml-10">
                  {item.label}
                </span>
                <item.icon className="h-6 w-6  " />
              </div>
            </a>
          );
        })
      }
    </div>
  </nav>
</div>

<script>
  /**
   * On page change set the active navigation item based on the current path.
   */
  function setActiveNavItem() {
    const navItems = document.querySelectorAll('[data-role="nav-item"]');
    const currentPath = window.location.pathname;

    navItems.forEach((item) => {
      const id = item.getAttribute('id')!;
      const isHomeNavItem = id === '/';

      // prettier-ignore
      const isActive = isHomeNavItem 
        ? currentPath === id 
        : currentPath.includes(id);

      item.setAttribute('data-active', String(isActive));
    });
  }

  function handleNavItemClick(e: Event) {
    const item = e.currentTarget as HTMLElement;
    const isActive = item.getAttribute('data-active') === 'true';
    if (isActive) e.preventDefault();
  }

  // Listen to the CustomEvent emitted by `VerticalSideBarLayout.astro`
  document.addEventListener('contentLoaded', () => {
    setActiveNavItem();

    const navItems = document.querySelectorAll('[data-role="nav-item"]');
    navItems.forEach((item) => {
      item.addEventListener('click', handleNavItemClick);
    });
  });
</script>
