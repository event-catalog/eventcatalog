---
const { id, filePath } = Astro.props;
import fs from 'node:fs/promises';
import { existsSync } from 'fs';
import yaml from 'js-yaml';
import path from 'path';
import SchemaViewerClient from './SchemaViewer.astro';
import Admonition from '../Admonition';
import { getMDXComponentsByName } from '@utils/markdown';

let schemas = [];

try {
  const file = await fs.readFile(filePath, 'utf-8');
  const schemaViewers = getMDXComponentsByName(file, 'SchemaViewer');

  // Loop around all the possible SchemaViewers in the file.
  const getAllComponents = schemaViewers.map(async (schemaViewerProps: any) => {
    const schemaPath = path.join(path.dirname(filePath), schemaViewerProps.file);
    const exists = existsSync(schemaPath);
    let schema;
    let render = true;

    if (exists) {
      // Load the schema for the component
      schema = await fs.readFile(schemaPath, 'utf-8');
      if (schemaPath.endsWith('.yml') || schemaPath.endsWith('.yaml')) {
        schema = yaml.load(schema);
      } else {
        schema = JSON.parse(schema);
        // Lets JSON schema control if the component should be rendered or not
        if (schema['x-eventcatalog-render-schema-viewer'] !== undefined) {
          render = schema['x-eventcatalog-render-schema-viewer'];
        }
      }
    }

    return {
      id: schemaViewerProps.id || id,
      exists,
      schema,
      schemaPath,
      ...schemaViewerProps,
      render,
    };
  });

  schemas = await Promise.all(getAllComponents);
} catch (error) {
  console.log('Failed to process schemas');
  console.log(error);
}
---

<section class="space-y-4">
  {
    schemas.length > 0 &&
      schemas.map((schema) => {
        if (!schema.render) return null;
        return (
          <div>
            {schema.exists && <SchemaViewerClient {...schema} />}

            {/* User has tried to load the schema, but it was not found on file system */}
            {!schema.exists && (
              <Admonition type="warning">
                <div>
                  <span class="block font-bold">{`<SchemaViewer/>`} failed to load</span>
                  <span class="block">Tried to load schema from {schema.schemaPath}, but no schema can be found</span>
                </div>
              </Admonition>
            )}
          </div>
        );
      })
  }
</section>

<script is:inline define:vars={{ schemas }}>
  // Can we move the SchemaViewerClient to another container? example container with the id "my-schema-viewer-container"
  // and then we can move the SchemaViewerClient to that container?

  function moveSchemaViewerToPortal(schema) {
    const portalId = `${schema.id}-${schema.file}-SchemaViewer-portal`;
    const schemaViewerContainer = document.getElementById(portalId);
    console.log('schemaViewerContainer', schemaViewerContainer);
    if (schemaViewerContainer) {
      schemaViewerContainer.appendChild(document.getElementById(`${schema.id}-${schema.file}-SchemaViewer-client`));
    }
  }

  console.log('schemas', schemas);

  // on DOM ready, move the SchemaViewerClient to the portal
  document.addEventListener('astro:page-load', () => {
    schemas.forEach(moveSchemaViewerToPortal);
  });
</script>
