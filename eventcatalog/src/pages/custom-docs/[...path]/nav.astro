---
import { buildUrl } from '@utils/url-builder';
const currentPath = Astro.url.pathname;
import { getNavigationItems } from '@utils/custom-docs';

const sidebarItems = await getNavigationItems();

interface SidebarItem {
  label: string;
  slug?: string;
  items?: SidebarItem[];
}

interface SidebarSection {
  label: string;
  items?: SidebarItem[];
  slug?: string;
  autogenerated?: {
    directory: string;
  };
}
---

<nav class="h-full text-gray-800 pt-2">
  <div class="mb-2 px-4">
    <input type="text" placeholder="Quick search..." class="w-full p-2 text-sm rounded-md border border-gray-200 h-[30px]" />
  </div>

  <div class="space-y-2 divide-y divide-gray-100/40">
    {
      sidebarItems.map((section: SidebarSection, index: number) => (
        <div class="pt-2 pb-2 px-4">
          <div class="space-y-0" data-section={`section-${index}`}>
            {section.items ? (
              <div class="flex items-center">
                <button class="p-1 hover:bg-gray-100 rounded-md" id={`group-toggle-${index}`}>
                  <div class="transition-transform duration-150" id={`chevron-${index}`}>
                    <svg
                      class="h-3 w-3 text-gray-500"
                      xmlns="http://www.w3.org/2000/svg"
                      width="16"
                      height="16"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    >
                      <polyline points="6 9 12 15 18 9" />
                    </svg>
                  </div>
                </button>
                <button
                  class="flex-grow flex items-center justify-between px-2 py-0.5 text-xs font-bold rounded-md hover:bg-purple-50"
                  id={`section-header-${index}`}
                >
                  <span class="truncate">{section.label}</span>
                  <span class="text-purple-600 ml-2 text-[10px] font-medium bg-purple-50 px-2 py-0.5 rounded uppercase">
                    Section
                  </span>
                </button>
              </div>
            ) : (
              <div class="flex items-center">
                <span class="flex-grow flex items-center justify-between px-2 py-0.5 text-xs font-bold rounded-md">
                  <span class="truncate">{section.label}</span>
                  <span class="text-purple-600 ml-2 text-[10px] font-medium bg-purple-50 px-2 py-0.5 rounded uppercase">
                    Section
                  </span>
                </span>
              </div>
            )}

            {section.items && (
              <div class="overflow-hidden transition-[height] duration-150 ease-out" id={`section-items-${index}`}>
                <div class="space-y-0.5 border-gray-200/80 border-l pl-4 ml-[9px] mt-1">
                  {section.items.map((item: SidebarItem, itemIndex: number) => {
                    // Determine if this is a nested item with children
                    const hasNestedItems = item.items && item.items.length > 0;
                    const itemId = `${index}-${itemIndex}`;

                    if (hasNestedItems && item.items) {
                      return (
                        <div class="py-1">
                          <div class="flex items-center">
                            <button class="p-1 hover:bg-gray-100 rounded-md" id={`nested-toggle-${itemId}`}>
                              <div class="transition-transform duration-150" id={`nested-chevron-${itemId}`}>
                                <svg
                                  class="h-3 w-3 text-gray-500"
                                  xmlns="http://www.w3.org/2000/svg"
                                  width="16"
                                  height="16"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  stroke="currentColor"
                                  stroke-width="2"
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                >
                                  <polyline points="6 9 12 15 18 9" />
                                </svg>
                              </div>
                            </button>
                            <button
                              class="flex-grow flex items-center px-2 py-1 text-xs font-medium text-gray-700 rounded-md hover:bg-purple-50"
                              id={`nested-header-${itemId}`}
                            >
                              <span class="truncate">{item.label}</span>
                            </button>
                          </div>

                          <div class="overflow-hidden transition-[height] duration-150 ease-out" id={`nested-items-${itemId}`}>
                            <div class="space-y-0.5 border-gray-200/80 border-l pl-4 ml-[9px] mt-1">
                              {item.items &&
                                item.items.map((nestedItem: SidebarItem, nestedIndex: number) => {
                                  const nestedItemPath = nestedItem.slug ? buildUrl(`/custom-docs/${nestedItem.slug}`) : '#';
                                  const isActive = currentPath === nestedItemPath || currentPath.endsWith(`/${nestedItem.slug}`);

                                  if (nestedItem.items && nestedItem.items.length > 0) {
                                    // Recursively render nested items (this could be extracted to a component for cleaner code)
                                    const nestedItemId = `${itemId}-${nestedIndex}`;
                                    return (
                                      <div class="py-1">
                                        <div class="flex items-center">
                                          <button class="p-1 hover:bg-gray-100 rounded-md" id={`nested-toggle-${nestedItemId}`}>
                                            <div class="transition-transform duration-150" id={`nested-chevron-${nestedItemId}`}>
                                              <svg
                                                class="h-3 w-3 text-gray-500"
                                                xmlns="http://www.w3.org/2000/svg"
                                                width="16"
                                                height="16"
                                                viewBox="0 0 24 24"
                                                fill="none"
                                                stroke="currentColor"
                                                stroke-width="2"
                                                stroke-linecap="round"
                                                stroke-linejoin="round"
                                              >
                                                <polyline points="6 9 12 15 18 9" />
                                              </svg>
                                            </div>
                                          </button>
                                          <button
                                            class="flex-grow flex items-center px-2 py-1 text-xs font-medium text-gray-700 rounded-md hover:bg-purple-50"
                                            id={`nested-header-${nestedItemId}`}
                                          >
                                            <span class="truncate">{nestedItem.label}</span>
                                          </button>
                                        </div>

                                        <div
                                          class="overflow-hidden transition-[height] duration-150 ease-out"
                                          id={`nested-items-${nestedItemId}`}
                                        >
                                          <div class="space-y-0.5 border-gray-200/80 border-l pl-4 ml-[9px] mt-1">
                                            {nestedItem.items.map((deepNestedItem: SidebarItem) => {
                                              const deepNestedItemPath = deepNestedItem.slug
                                                ? buildUrl(`/custom-docs/${deepNestedItem.slug}`)
                                                : '#';
                                              const isDeepActive =
                                                currentPath === deepNestedItemPath ||
                                                currentPath.endsWith(`/${deepNestedItem.slug}`);

                                              return (
                                                <a
                                                  href={deepNestedItemPath}
                                                  class={`flex items-center px-2 py-1.5 text-xs ${isDeepActive ? 'bg-purple-100 text-purple-900 font-medium' : 'text-gray-600 hover:bg-purple-100'} rounded-md`}
                                                  data-active={isDeepActive}
                                                >
                                                  <span class="truncate">{deepNestedItem.label}</span>
                                                </a>
                                              );
                                            })}
                                          </div>
                                        </div>
                                      </div>
                                    );
                                  }

                                  return (
                                    <a
                                      href={nestedItemPath}
                                      class={`flex items-center px-2 py-1.5 text-xs ${isActive ? 'bg-purple-100 text-purple-900 font-medium' : 'text-gray-600 hover:bg-purple-100'} rounded-md`}
                                      data-active={isActive}
                                    >
                                      <span class="truncate">{nestedItem.label}</span>
                                    </a>
                                  );
                                })}
                            </div>
                          </div>
                        </div>
                      );
                    }

                    const itemPath = item.slug ? buildUrl(`/custom-docs/${item.slug}`) : '#';
                    const isActive = currentPath === itemPath || currentPath.endsWith(`/${item.slug}`);

                    return (
                      <a
                        href={itemPath}
                        class={`flex items-center px-2 py-1.5 text-xs ${isActive ? 'bg-purple-100 text-purple-900 font-medium' : 'text-gray-600 hover:bg-purple-100'} rounded-md`}
                        data-active={isActive}
                      >
                        <span class="truncate">{item.label}</span>
                      </a>
                    );
                  })}
                </div>
              </div>
            )}

            {section.slug && !section.items && (
              <a
                href={buildUrl(`/custom-docs/${section.slug}`)}
                class={`flex items-center px-2 py-1.5 text-xs ${currentPath.endsWith(`/${section.slug}`) ? 'bg-purple-100 text-purple-900 font-medium' : 'text-gray-600 hover:bg-purple-100'} rounded-md ml-6`}
                data-active={currentPath.endsWith(`/${section.slug}`)}
              >
                <span class="truncate">{section.label}</span>
              </a>
            )}
          </div>
        </div>
      ))
    }
  </div>
</nav>

<script is:inline>
  document.addEventListener('DOMContentLoaded', function () {
    // Handle toggle functionality for sections and nested sections
    const toggleButtons = document.querySelectorAll('[id^="group-toggle-"], [id^="nested-toggle-"]');
    const headerButtons = document.querySelectorAll('[id^="section-header-"], [id^="nested-header-"]');

    function toggleSection(id, isNested = false) {
      const prefix = isNested ? 'nested-' : 'section-';
      const itemsList = document.getElementById(`${prefix}items-${id}`);
      const chevron = document.getElementById(`${isNested ? 'nested-' : ''}chevron-${id}`);

      if (itemsList && chevron) {
        // Toggle collapsed state
        if (itemsList.classList.contains('h-0')) {
          itemsList.classList.remove('h-0');
          itemsList.classList.add('h-auto');
          chevron.classList.add('rotate-180');
        } else {
          itemsList.classList.add('h-0');
          itemsList.classList.remove('h-auto');
          chevron.classList.remove('rotate-180');
        }
      }
    }

    toggleButtons.forEach(function (button) {
      const isNested = button.id.startsWith('nested-toggle-');
      const id = button.id.replace(isNested ? 'nested-toggle-' : 'group-toggle-', '');

      button.addEventListener('click', function (e) {
        e.stopPropagation();
        toggleSection(id, isNested);
      });
    });

    headerButtons.forEach(function (button) {
      const isNested = button.id.startsWith('nested-header-');
      const id = button.id.replace(isNested ? 'nested-header-' : 'section-header-', '');

      button.addEventListener('click', function (e) {
        e.stopPropagation();
        toggleSection(id, isNested);
      });
    });

    // Initialize all sections as expanded
    document.querySelectorAll('[id^="section-items-"], [id^="nested-items-"]').forEach(function (section) {
      section.classList.remove('h-0');
      section.classList.add('h-auto');
    });

    document.querySelectorAll('[id^="chevron-"], [id^="nested-chevron-"]').forEach(function (chevron) {
      chevron.classList.add('rotate-180');
    });

    // Find active item and ensure its section is expanded
    const activeItem = document.querySelector('[data-active="true"]');
    if (activeItem) {
      // Scroll the active item into view
      setTimeout(function () {
        activeItem.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }, 300);
    }

    // Handle search functionality
    const searchInput = document.querySelector('input[type="text"]');
    if (searchInput) {
      searchInput.addEventListener('input', function () {
        const searchTermValue = this.value; // Using 'this' instead of searchInput.value
        const searchTerm = searchTermValue ? searchTermValue.toLowerCase() : '';
        const sections = document.querySelectorAll('[data-section]');

        sections.forEach(function (section) {
          const sectionText = section.textContent || '';
          const sectionId = section.getAttribute('data-section') || '';
          const idNumber = sectionId.replace('section-', '');
          const itemsContainer = document.getElementById(`section-items-${idNumber}`);

          if (searchTerm === '') {
            section.classList.remove('hidden');
            if (itemsContainer) {
              itemsContainer.classList.remove('h-0');
              itemsContainer.classList.add('h-auto');
            }
          } else if (sectionText.toLowerCase().includes(searchTerm)) {
            section.classList.remove('hidden');
            if (itemsContainer) {
              itemsContainer.classList.remove('h-0');
              itemsContainer.classList.add('h-auto');
            }
          } else {
            section.classList.add('hidden');
          }
        });
      });
    }
  });
</script>
