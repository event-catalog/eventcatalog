---
import RectangleGroupIcon from '@heroicons/react/24/outline/RectangleGroupIcon';
import Footer from '@layouts/Footer.astro';
import VerticalSideBarLayout from '@layouts/VerticalSideBarLayout.astro';
import { getDomains, getUbiquitousLanguage } from '@utils/collections/domains';
import { buildUrl } from '@utils/url-builder';
import { ClientRouter } from 'astro:transitions';
import { marked } from 'marked';

export async function getStaticPaths() {
  const domains = await getDomains({ getAllVersions: false });

  const pages = await domains.reduce<Promise<any[]>>(async (acc, domain) => {
    const accumulator = await acc;
    const ubiquitousLanguages = await getUbiquitousLanguage(domain);

    if (ubiquitousLanguages.length === 0) {
      return accumulator;
    }

    const dictionary = ubiquitousLanguages[0].data.dictionary;

    if (!dictionary) {
      return accumulator;
    }

    return [
      ...accumulator,
      ...dictionary.map((item) => ({
        params: {
          type: domain.collection,
          id: domain.data.id,
          dictionaryId: item.id,
        },
        props: {
          type: domain.collection,
          domainId: domain.data.id,
          domain: domain.data,
          ubiquitousLanguage: item,
          ...item,
        },
      })),
    ];
  }, Promise.resolve([]));

  return pages;
}

const props = Astro.props;
const { ubiquitousLanguage } = props;
const pageTitle = `${props.type} | ${ubiquitousLanguage.name}`.replace(/^\w/, (c) => c.toUpperCase());

marked.setOptions({
  breaks: true,
  gfm: true,
});

const badges = [
  {
    backgroundColor: 'yellow',
    textColor: 'yellow',
    content: props.domain.name,
    icon: RectangleGroupIcon,
    class: 'text-yellow-400',
    href: buildUrl(`/docs/${props.type}/${props.domainId}`),
  },
];
---

<VerticalSideBarLayout title={pageTitle} description={ubiquitousLanguage.summary}>
  <main class="flex sm:px-8 docs-layout h-full max-w-7xl">
    <div class="flex docs-layout w-full">
      <div class="w-full lg:mr-2 pr-8 overflow-y-auto py-8 min-h-[50em]">
        <nav class="flex mb-4" aria-label="Breadcrumb">
          <ol class="inline-flex items-center space-x-1 md:space-x-3">
            <li class="inline-flex items-center">
              <a
                href={buildUrl(`/docs/${props.type}/${props.domainId}/language`)}
                class="inline-flex items-center text-sm font-medium text-gray-500 hover:text-primary"
              >
                <svg
                  class="w-3 h-3 mr-2.5"
                  aria-hidden="true"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke-width="2"
                  stroke="currentColor"
                >
                  <path stroke-linecap="round" stroke-linejoin="round" d="M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18"></path>
                </svg>
                Back to ubiquitous language List
              </a>
            </li>
          </ol>
        </nav>

        <div class="border-b border-gray-200 flex justify-between items-start md:pb-2">
          <div>
            <h2 id="doc-page-header" class="text-2xl md:text-4xl font-bold text-black">
              {ubiquitousLanguage.name}
            </h2>
            <p class="text-lg pt-2 text-gray-500 font-light">{ubiquitousLanguage.summary}</p>
            <!-- Add bage -->
            {
              badges && (
                <div class="flex flex-wrap py-2 pt-4">
                  {badges.map((badge: any) => {
                    return (
                      <a href={badge.href || '#'} class="pb-2">
                        <span
                          id={badge.id || ''}
                          class={`text-sm font-light text-gray-500 px-2 py-1 rounded-md mr-2  bg-gradient-to-b  from-${badge.backgroundColor}-100 to-${badge.backgroundColor}-200 space-x-1 border border-${badge.backgroundColor}-200 text-${badge.textColor}-800 flex items-center ${badge.class ? badge.class : ''} `}
                        >
                          {badge.icon && <badge.icon className="w-4 h-4 inline-block mr-1 " />}
                          {badge.iconURL && <img src={badge.iconURL} class="w-5 h-5 inline-block " />}
                          <span>{badge.content}</span>
                        </span>
                      </a>
                    );
                  })}
                </div>
              )
            }
          </div>
        </div>

        {
          ubiquitousLanguage.description && (
            <div class="prose prose-md py-4 max-w-none" set:html={marked.parse(ubiquitousLanguage.description)} />
          )
        }

        {
          !ubiquitousLanguage.description && (
            <div class="prose prose-md py-4 max-w-none">
              <p>No description for {ubiquitousLanguage.name} available.</p>
            </div>
          )
        }

        <Footer />
      </div>
    </div>
    <ClientRouter />
  </main>

  <script>
    function initializeSearch() {
      const searchInput = document.getElementById('searchInput');
      const termCards = document.querySelectorAll('.term-card');
      const noSearchResults = document.getElementById('noSearchResults');

      searchInput?.addEventListener('input', (e) => {
        const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
        let visibleCount = 0;

        termCards.forEach((card) => {
          const title = card.querySelector('h3')?.textContent?.toLowerCase() || '';
          const description = card.querySelector('p')?.textContent?.toLowerCase() || '';
          const matches = title.includes(searchTerm) || description.includes(searchTerm);

          card.classList.toggle('hidden', !matches);
          if (matches) visibleCount++;
        });

        // Show/hide no results message
        if (noSearchResults) {
          noSearchResults.classList.toggle('hidden', visibleCount > 0);
        }
      });
    }

    function initializeShowMore() {
      const cards = document.querySelectorAll('.term-card');

      cards.forEach((card) => {
        const newCard = card.cloneNode(true);
        if (card.parentNode) {
          card.parentNode.replaceChild(newCard, card);
          // Initially show summary
          const summary = (newCard as Element).querySelector('.summary-text');
          summary?.classList.add('visible');
        }
        newCard.addEventListener('click', () => {
          const description = (newCard as Element).querySelector('.description-text');
          const summary = (newCard as Element).querySelector('.summary-text');
          const showMoreText = (newCard as Element).querySelector('.show-more-text');

          if (description && summary && showMoreText) {
            (newCard as Element).classList.toggle('expanded');
            description.classList.toggle('visible');
            summary.classList.toggle('visible');
            showMoreText.textContent = description.classList.contains('visible') ? 'Show less' : 'Show more';
          }
        });
      });
    }

    function highlightMatchingTerm() {
      const urlParams = new URLSearchParams(window.location.search);
      const termId = urlParams.get('id');

      if (termId) {
        const cards = document.querySelectorAll('.term-card');
        cards.forEach((card) => {
          const termName = card.querySelector('h3')?.textContent?.trim();
          if (termName?.toLowerCase() === termId.toLowerCase()) {
            // Add highlight class
            card.classList.add('highlighted');
            (card as HTMLElement).click();

            setTimeout(() => {
              // Scroll into view
              card.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }, 300);
          }
        });
      }
    }

    document.addEventListener('astro:page-load', () => {
      initializeShowMore();
      initializeSearch();
      highlightMatchingTerm();
    });

    initializeShowMore();
    initializeSearch();
    highlightMatchingTerm();
  </script>
</VerticalSideBarLayout>
