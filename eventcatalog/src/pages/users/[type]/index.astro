---
import DiscoverLayout, { type Props as DiscoverLayoutProps } from '@layouts/DiscoverLayout.astro';
import { getUsers } from '@utils/users';
import { getTeams } from '@utils/teams';

import { pageDataLoader } from '@utils/page-loaders/page-data-loader';
import AddressBookLayout from '@layouts/AddressBookLayout.astro';

export async function getStaticPaths() {
  const loaders = {
    users: getUsers,
    teams: getTeams,
  };

  const itemTypes = ['users', 'teams'] as const;
  const allItems = await Promise.all(itemTypes.map((type) => loaders[type]()));

  return allItems.flatMap((items, index) => ({
    params: {
      type: itemTypes[index],
    },
    props: {
      data: items,
      type: itemTypes[index],
    },
  }));
}

const { type, data } = Astro.props;

function mapToItem(i: any) {
  return {
    collection: i.collection,
    data: {
      id: i.data.id,
      name: i.data.name,
      version: i.data.version,
    },
  };
}
---

Hello world

<AddressBookLayout
  title={`${type} (${data.length})`}
  subtitle={`Find, filter and search for any ${type} in your system.`}
  data={data}
  type={type}
/>

<!-- <DiscoverLayout
  title={`${type} (${data.length})`}
  subtitle={`Find, filter and search for any ${type} in your system.`}
  data={data.map(
    (d) =>
      ({
        collection: d.collection,
        data: {
          id: d.data.id,
          name: d.data.name,
          summary: d.data?.summary,
          version: d.data.version,
          latestVersion: d.data?.latestVersion,
          badges: d.data?.badges,
          // @ts-ignore
          consumers: d.data?.consumers?.map(mapToItem) ?? [],
          // @ts-ignore
          producers: d.data?.producers?.map(mapToItem) ?? [],
          // @ts-ignore
          receives: d.data?.receives?.map(mapToItem) ?? [],
          // @ts-ignore
          sends: d.data?.sends?.map(mapToItem) ?? [],
          // @ts-ignore
          services: d.data?.services?.map(mapToItem) ?? [],
        },
      }) as DiscoverLayoutProps<typeof type>['data'][0]
  )}
  type={type}
/> -->
