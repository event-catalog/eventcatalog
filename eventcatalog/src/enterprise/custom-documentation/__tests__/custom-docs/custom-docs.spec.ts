import { join } from 'node:path';
import { getNavigationItems } from '../../utils/custom-docs';
import { vi } from 'vitest';
import type { ContentCollectionKey } from 'astro:content';
import { mockDocs } from './mocks';

vi.mock('@config', async (importOriginal) => {
  const config = {
    customDocs: {
      sidebar: [
        {
          label: 'Guides',
          items: [
            { label: 'Example Guide', slug: 'guides/quickstart' },
            { label: 'Random Guide', slug: 'guides/02-random' },
          ],
        },
        {
          label: 'Architecture Records',
          items: [
            { label: 'What is an Architecture Decision Record?', slug: 'architecture-records/architecture-decision-record' },
            { label: 'Event-driven architecture adoption', slug: 'architecture-records/eda-adoption' },
            { label: 'Broker of choice', slug: 'architecture-records/broker-of-choice' },
          ],
        },
        {
          label: 'Auto generated docs',
          autogenerated: { directory: 'auto-generated' },
        },
        {
          label: 'Nested Examples',
          items: [
            { label: 'Root page', slug: 'guides/quickstart' },
            {
              label: 'Nested section',
              items: [
                { label: 'Nested page 1', slug: 'guides/quickstart' },
                { label: 'Nested page 2', slug: 'guides/02-random' },
              ],
            },
          ],
        },
      ],
    },
  };
  return {
    default: config,
  };
});

const pathToTestCatalog = join(__dirname, 'fake-catalog');

vi.mock('astro:content', async (importOriginal) => {
  return {
    ...(await importOriginal<typeof import('astro:content')>()),
    // this will only affect "foo" outside of the original module
    getEntry: (key: ContentCollectionKey, id: string) => {
      switch (key) {
        case 'customPages':
          return Promise.resolve(mockDocs.find((doc) => doc.id === id));
        default:
          return Promise.resolve([]);
      }
    },
  };
});

describe('Custom Docs', () => {
  beforeEach(() => {
    process.env.PROJECT_DIR = pathToTestCatalog;
    vi.resetAllMocks();
  });

  describe('manually defined items', () => {
    it('returns the sidebar items as they are define', async () => {
      const navigationItems = await getNavigationItems();

      expect(navigationItems).toEqual(
        expect.arrayContaining([
          {
            label: 'Guides',
            items: [
              { label: 'Example Guide', slug: 'guides/quickstart' },
              { label: 'Random Guide', slug: 'guides/02-random' },
            ],
          },
        ])
      );
    });
  });

  describe('nested items', () => {
    it('returns the nested items as they are define', async () => {
      const navigationItems = await getNavigationItems();

      expect(navigationItems).toEqual(
        expect.arrayContaining([
          {
            label: 'Nested Examples',
            items: [
              { label: 'Root page', slug: 'guides/quickstart' },
              {
                label: 'Nested section',
                items: [
                  { label: 'Nested page 1', slug: 'guides/quickstart' },
                  { label: 'Nested page 2', slug: 'guides/02-random' },
                ],
              },
            ],
          },
        ])
      );
    });
  });

  describe('auto generated items', () => {
    it('reads the files in the given directory and returns them as navigation items', async () => {
      process.env.PROJECT_DIR = pathToTestCatalog;

      const navigationItems = await getNavigationItems();

      expect(navigationItems).toEqual(
        expect.arrayContaining([
          {
            label: 'Auto generated docs',
            items: [
              {
                label: 'Introduction',
                slug: '/auto-generated/01-introduction',
              },
              {
                label: 'Hello World',
                slug: '/auto-generated/02-hello-world',
              },
            ],
          },
        ])
      );
    });
  });
});
