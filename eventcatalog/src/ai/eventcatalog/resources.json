[{"id":"UserSubscriptionStarted-yjzh173mxza","name":"User subscription started","version":"0.0.1","summary":"An event that is triggered when a new user subscription has started\n","owners":["dboyne"],"badges":[{"content":"New!","backgroundColor":"green","textColor":"green"}],"markdown":"import Footer from '@catalog/components/footer.astro';\n\n## Overview\n\nThe `UserSubscriptionStarted` event is triggered when a user starts a new subscription with our service.\n\n## Architecture diagram\n\n<NodeGraph />\n\n<Footer />"},{"id":"UserSubscriptionCancelled-1u5nw59u801","name":"User subscription cancelled","version":"0.0.1","summary":"An event that is triggered when a users subscription has been cancelled\n","owners":["dboyne"],"badges":[{"content":"New!","backgroundColor":"green","textColor":"green"}],"markdown":"import Footer from '@catalog/components/footer.astro';\n\n## Overview\n\nThe `UserSubscriptionCancelled` event is triggered when a users subscription has been cancelled.\n\n## Architecture diagram\n\n<NodeGraph />\n\n<Footer />"},{"id":"PaymentProcessed-tsa4tgeuwe","name":"Payment Processed","version":"1.0.0","summary":"Event is triggered after the payment has been successfully processed","owners":["dboyne"],"channels":[{"id":"payments.{env}.events","parameters":{"env":"staging"}}],"markdown":"import Footer from '@catalog/components/footer.astro';\n\n## Overview\n\nThe PaymentProcessed event is triggered after the payment has been successfully processed by the Payment Service. This event signifies that a payment has been confirmed, and it communicates the outcome to other services and components within the system.\n\n<NodeGraph />\n\n### Payload Example\n\n```json title=\"Payload example\"\n{\n  \"transactionId\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"userId\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"orderId\": \"789e1234-b56c-78d9-e012-3456789fghij\",\n  \"amount\": 100.50,\n  \"paymentMethod\": \"CreditCard\",\n  \"status\": \"confirmed\",\n  \"confirmationDetails\": {\n    \"gatewayResponse\": \"Approved\",\n    \"transactionId\": \"abc123\"\n  },\n  \"timestamp\": \"2024-07-04T14:48:00Z\"\n}\n```\n\n### Security Considerations\n\n- **Data Validation**: Ensure that all data in the event payload is validated before publishing to prevent injection attacks or other malicious activities.\n- **Sensitive Data Handling**: Avoid including sensitive information (e.g., full credit card numbers) in the event payload. Use secure channels and encryption for such data.\n- **Authentication and Authorization**: Ensure that only authorized services can publish or consume PaymentProcessed events.\n\n<Footer />"},{"id":"PaymentProcessed-azx6ud9kuo9","name":"Payment Processed","version":"0.0.1","summary":"Event is triggered after the payment has been successfully processed","owners":["dboyne"],"markdown":"import Footer from '@catalog/components/footer.astro';\n\n## Overview\n\nThe PaymentProcessed event is triggered after the payment has been successfully processed by the Payment Service. This event signifies that a payment has been confirmed, and it communicates the outcome to other services and components within the system.\n\n<NodeGraph />\n\n### Payload Example\n\n```json title=\"Payload example\"\n{\n  \"transactionId\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"userId\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"orderId\": \"789e1234-b56c-78d9-e012-3456789fghij\",\n  \"amount\": 100.50,\n  \"paymentMethod\": \"CreditCard\",\n  \"status\": \"confirmed\",\n  \"confirmationDetails\": {\n    \"gatewayResponse\": \"Approved\",\n    \"transactionId\": \"abc123\"\n  },\n  \"timestamp\": \"2024-07-04T14:48:00Z\"\n}\n```\n\n### Security Considerations\n\n- **Data Validation**: Ensure that all data in the event payload is validated before publishing to prevent injection attacks or other malicious activities.\n- **Sensitive Data Handling**: Avoid including sensitive information (e.g., full credit card numbers) in the event payload. Use secure channels and encryption for such data.\n- **Authentication and Authorization**: Ensure that only authorized services can publish or consume PaymentProcessed events.\n\n<Footer />"},{"id":"PaymentInitiated-6hmsukdfy65","name":"Payment Initiated","version":"0.0.1","summary":"Event is triggered when a user initiates a payment through the Payment Service","owners":["dboyne"],"channels":[{"id":"payments.{env}.events","parameters":{"env":"staging"}}],"markdown":"import Footer from '@catalog/components/footer.astro';\n\n## Overview\n\nThe Payment Initiated event is triggered when a user initiates a payment through the Payment Service. This event signifies the beginning of the payment process and contains all necessary information to process the payment.\n\n<NodeGraph />\n\n### Payload Example\n\n```json title=\"Payload example\"\n{\n  \"userId\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"orderId\": \"789e1234-b56c-78d9-e012-3456789fghij\",\n  \"amount\": 100.50,\n  \"paymentMethod\": \"CreditCard\",\n  \"timestamp\": \"2024-07-04T14:48:00Z\"\n}\n```\n\n### Security Considerations\n\n- **Authentication**: Ensure that only authenticated users can initiate a payment, and the userId in the payload matches the authenticated user.\n- **Data Validation**: Validate all input data to prevent injection attacks or other malicious input.\n- **Sensitive Data Handling**: Avoid including sensitive information (e.g., credit card numbers) in the event payload. Use secure channels and encryption for such data.\n\n<Footer />"},{"id":"OrderConfirmed-ulgfdhune3","name":"Order confirmed","version":"0.0.1","summary":"Indicates an order has been confirmed\n","owners":["dboyne","msmith"],"badges":[{"content":"Recently updated!","backgroundColor":"green","textColor":"green"},{"content":"Channel:Apache Kafka","backgroundColor":"yellow","textColor":"yellow"}],"schemaPath":"schema.json","channels":[{"id":"orders.{env}.events"}],"markdown":"import Footer from '@catalog/components/footer.astro';\n\n## Overview\n\nThe OrderConfirmed event is triggered when an order has been successfully confirmed. This event notifies relevant services that the order is ready for further processing, such as inventory adjustment, payment finalization, and preparation for shipping.\n\n## Architecture Diagram\n\n<NodeGraph />\n\n## Payload\n\n```json title=\"Example payload\"\n{\n  \"orderId\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"userId\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"orderItems\": [\n    {\n      \"productId\": \"789e1234-b56c-78d9-e012-3456789fghij\",\n      \"productName\": \"Example Product\",\n      \"quantity\": 2,\n      \"unitPrice\": 29.99,\n      \"totalPrice\": 59.98\n    }\n  ],\n  \"orderStatus\": \"confirmed\",\n  \"totalAmount\": 150.75,\n  \"confirmationTimestamp\": \"2024-07-04T14:48:00Z\"\n}\n```\n\n## Schema\n\n<Schema file=\"schema.json\"/>\n\n<Footer />"},{"id":"OrderCancelled-n79s06v4oq","name":"Order cancelled","version":"0.0.1","summary":"Indicates an order has been canceled\n","owners":["dboyne","msmith"],"badges":[{"content":"Recently updated!","backgroundColor":"green","textColor":"green"},{"content":"Channel:Apache Kafka","backgroundColor":"yellow","textColor":"yellow"}],"schemaPath":"schema.json","channels":[{"id":"orders.{env}.events"}],"markdown":"import Footer from '@catalog/components/footer.astro';\n\n## Overview\n\nThe OrderCancelled event is triggered whenever an existing order is cancelled. This event ensures that all relevant services are notified of the cancellation, allowing them to take appropriate actions such as updating inventory levels, refunding payments, and notifying the user. The event helps maintain consistency across the system by ensuring all dependent services are aware of the order cancellation.\n\n## Example payload\n\n```json title=\"Example payload\"\n{\n  \"orderId\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"userId\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"orderItems\": [\n    {\n      \"productId\": \"789e1234-b56c-78d9-e012-3456789fghij\",\n      \"productName\": \"Example Product\",\n      \"quantity\": 2,\n      \"unitPrice\": 29.99,\n      \"totalPrice\": 59.98\n    }\n  ],\n  \"orderStatus\": \"cancelled\",\n  \"totalAmount\": 59.98,\n  \"cancellationReason\": \"Customer requested cancellation\",\n  \"timestamp\": \"2024-07-04T14:48:00Z\"\n}\n\n```\n\n## Schema\n\nJSON schema for the event.\n\n<Schema title=\"JSON Schema\" file=\"schema.json\"/>\n\n<Footer />"},{"id":"OrderAmended-f57grgta64s","name":"Order amended","version":"0.0.1","summary":"Indicates an order has been changed\n","owners":["dboyne","msmith"],"badges":[{"content":"Recently updated!","backgroundColor":"green","textColor":"green"},{"content":"Channel:Apache Kafka","backgroundColor":"yellow","textColor":"yellow"}],"schemaPath":"schema.avro","channels":[{"id":"orders.{env}.events","parameters":{"env":"staging"}}],"markdown":"import Footer from '@catalog/components/footer.astro';\n\n## Overview\n\nThe OrderAmended event is triggered whenever an existing order is modified. This event ensures that all relevant services are notified of changes to an order, such as updates to order items, quantities, shipping information, or status. The event allows the system to maintain consistency and ensure that all dependent services can react appropriately to the amendments.\n\n<NodeGraph />\n\n## Example payload\n\n```json title=\"Example Payload\"\n{\n  \"orderId\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"userId\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"amendedItems\": [\n    {\n      \"productId\": \"789e1234-b56c-78d9-e012-3456789fghij\",\n      \"productName\": \"Example Product\",\n      \"oldQuantity\": 2,\n      \"newQuantity\": 3,\n      \"unitPrice\": 29.99,\n      \"totalPrice\": 89.97\n    }\n  ],\n  \"orderStatus\": \"confirmed\",\n  \"totalAmount\": 150.75,\n  \"timestamp\": \"2024-07-04T14:48:00Z\"\n}\n```\n\n## Schema (Avro)\n\n<Schema file=\"schema.avro\" />\n\n## Schema (JSON)\n\n<Schema file=\"schema.json\" />\n\n<Footer />"},{"id":"OutOfStock-bziyp1hk2ap","name":"Inventory out of stock","version":"0.0.4","summary":"Indicates inventory is out of stock\n","owners":["dboyne","msmith","asmith","full-stack","mobile-devs"],"channels":[{"id":"inventory.{env}.events"}],"badges":[{"content":"Recently updated!","backgroundColor":"green","textColor":"green"},{"content":"Channel:Apache Kafka","backgroundColor":"yellow","textColor":"yellow"}],"markdown":"import Footer from '@catalog/components/footer.astro';\n\n## Overview\n\nThe `Inventory Adjusted` event is triggered whenever there is a change in the inventory levels of a product. This could occur due to various reasons such as receiving new stock, sales, returns, or manual adjustments by the inventory management team. The event ensures that all parts of the system that rely on inventory data are kept up-to-date with the latest inventory levels.\n\n<NodeGraph />\n\n### Payload\nThe payload of the `Inventory Adjusted` event includes the following fields:\n\n```json title=\"Example of payload\" frame=\"terminal\"\n{\n  \"event_id\": \"string\",\n  \"timestamp\": \"ISO 8601 date-time\",\n  \"product_id\": \"string\",\n  \"adjusted_quantity\": \"integer\",\n  \"new_quantity\": \"integer\",\n  \"adjustment_reason\": \"string\",\n  \"adjusted_by\": \"string\"\n}\n```\n\n### Producing the Event\n\nTo produce an Inventory Adjusted event, use the following example Kafka producer configuration in Python:\n\n```python title=\"Produce event in Python\" frame=\"terminal\"\nfrom kafka import KafkaProducer\nimport json\nfrom datetime import datetime\n\n# Kafka configuration\nproducer = KafkaProducer(\n    bootstrap_servers=['localhost:9092'],\n    value_serializer=lambda v: json.dumps(v).encode('utf-8')\n)\n\n# Event data\nevent_data = {\n  \"event_id\": \"abc123\",\n  \"timestamp\": datetime.utcnow().isoformat() + 'Z',\n  \"product_id\": \"prod987\",\n  \"adjusted_quantity\": 10,\n  \"new_quantity\": 150,\n  \"adjustment_reason\": \"restock\",\n  \"adjusted_by\": \"user123\"\n}\n\n# Send event to Kafka topic\nproducer.send('inventory.adjusted', event_data)\nproducer.flush()\n```\n\n### Consuming the Event\n\nTo consume an Inventory Adjusted event, use the following example Kafka consumer configuration in Python:\n\n```python title=\"Consuming the event with python\" frame=\"terminal\"\nfrom kafka import KafkaConsumer\nimport json\n\n# Kafka configuration\nconsumer = KafkaConsumer(\n    'inventory.adjusted',\n    bootstrap_servers=['localhost:9092'],\n    auto_offset_reset='earliest',\n    enable_auto_commit=True,\n    group_id='inventory_group',\n    value_serializer=lambda v: json.dumps(v).encode('utf-8')\n)\n\n# Consume events\nfor message in consumer:\n    event_data = json.loads(message.value)\n    print(f\"Received Inventory Adjusted event: {event_data}\")\n```\n\n<Footer />"},{"id":"OutOfStock-kasay41ruvg","name":"Inventory out of stock","version":"0.0.1","summary":"Indicates inventory is out of stock\n","owners":["dboyne","msmith","asmith","full-stack","mobile-devs"],"badges":[{"content":"Recently updated!","backgroundColor":"green","textColor":"green"},{"content":"Channel:Apache Kafka","backgroundColor":"yellow","textColor":"yellow"}],"markdown":"## Overview\n\nThe `Inventory Adjusted` event is triggered whenever there is a change in the inventory levels of a product. This could occur due to various reasons such as receiving new stock, sales, returns, or manual adjustments by the inventory management team. The event ensures that all parts of the system that rely on inventory data are kept up-to-date with the latest inventory levels.\n\n<NodeGraph />\n\n### Payload\nThe payload of the `Inventory Adjusted` event includes the following fields:\n\n```json title=\"Example of payload\" frame=\"terminal\"\n{\n  \"event_id\": \"string\",\n  \"timestamp\": \"ISO 8601 date-time\",\n  \"product_id\": \"string\",\n  \"adjusted_quantity\": \"integer\",\n  \"new_quantity\": \"integer\",\n  \"adjustment_reason\": \"string\",\n  \"adjusted_by\": \"string\"\n}\n```\n\n### Producing the Event\n\nTo produce an Inventory Adjusted event, use the following example Kafka producer configuration in Python:\n\n```python title=\"Produce event in Python\" frame=\"terminal\"\nfrom kafka import KafkaProducer\nimport json\nfrom datetime import datetime\n\n# Kafka configuration\nproducer = KafkaProducer(\n    bootstrap_servers=['localhost:9092'],\n    value_serializer=lambda v: json.dumps(v).encode('utf-8')\n)\n\n# Event data\nevent_data = {\n  \"event_id\": \"abc123\",\n  \"timestamp\": datetime.utcnow().isoformat() + 'Z',\n  \"product_id\": \"prod987\",\n  \"adjusted_quantity\": 10,\n  \"new_quantity\": 150,\n  \"adjustment_reason\": \"restock\",\n  \"adjusted_by\": \"user123\"\n}\n\n# Send event to Kafka topic\nproducer.send('inventory.adjusted', event_data)\nproducer.flush()\n```\n\n### Consuming the Event\n\nTo consume an Inventory Adjusted event, use the following example Kafka consumer configuration in Python:\n\n```python title=\"Consuming the event with python\" frame=\"terminal\"\nfrom kafka import KafkaConsumer\nimport json\n\n# Kafka configuration\nconsumer = KafkaConsumer(\n    'inventory.adjusted',\n    bootstrap_servers=['localhost:9092'],\n    auto_offset_reset='earliest',\n    enable_auto_commit=True,\n    group_id='inventory_group',\n    value_serializer=lambda v: json.dumps(v).encode('utf-8')\n)\n\n# Consume events\nfor message in consumer:\n    event_data = json.loads(message.value)\n    print(f\"Received Inventory Adjusted event: {event_data}\")\n```"},{"id":"InventoryAdjusted-uxmu1z0o0jg","name":"Inventory adjusted","version":"1.0.1","summary":"Indicates a change in inventory level\n","owners":["dboyne","msmith","asmith","full-stack","mobile-devs"],"channels":[{"id":"inventory.{env}.events"}],"badges":[{"content":"Recently updated!","backgroundColor":"green","textColor":"green"},{"content":"Channel:Apache Kafka","backgroundColor":"yellow","textColor":"yellow"}],"schemaPath":"schema.avro","markdown":"import Footer from '@catalog/components/footer.astro';\n\n## Overview\n\nThe `Inventory Adjusted` event is triggered whenever there is a change in the inventory levels of a product. This could occur due to various reasons such as receiving new stock, sales, returns, or manual adjustments by the inventory management team. The event ensures that all parts of the system that rely on inventory data are kept up-to-date with the latest inventory levels.\n\n<Tiles >\n    <Tile icon=\"UserGroupIcon\" href=\"/docs/teams/full-stack\" title=\"Contact the team\" description=\"Any questions? Feel free to contact the owners\" />\n    <Tile icon=\"DocumentIcon\" href={`/generated/events/Inventory/${frontmatter.id}/schema.avro`} title=\"View the schema\" description=\"View the schema directly in your browser\" />\n</Tiles>\n\n## Architecture diagram\n\n<NodeGraph />\n\n<SchemaViewer file=\"schema.json\" title=\"JSON Schema\" maxHeight=\"500\" />\n\n## Payload example\n\nEvent example you my see being published.\n\n```json title=\"Payload example\"\n{\n  \"Name\": \"John Doe\",\n  \"Age\": 30,\n  \"Department\": \"Engineering\",\n  \"Position\": \"Software Engineer\",\n  \"Salary\": 85000.50,\n  \"JoinDate\": \"2024-01-15\"\n}\n```\n\n## Schema (avro)\n\n<Schema file=\"schema.avro\" title=\"Inventory Adjusted Schema (avro)\" />\n\n## Producing the Event\n\nTo produce an Inventory Adjusted event, use the following example Kafka producer configuration in Python:\n\n```python title=\"Produce event in Python\" frame=\"terminal\"\nfrom kafka import KafkaProducer\nimport json\nfrom datetime import datetime\n\n# Kafka configuration\nproducer = KafkaProducer(\n    bootstrap_servers=['localhost:9092'],\n    value_serializer=lambda v: json.dumps(v).encode('utf-8')\n)\n\n# Event data\nevent_data = {\n  \"event_id\": \"abc123\",\n  \"timestamp\": datetime.utcnow().isoformat() + 'Z',\n  \"product_id\": \"prod987\",\n  \"adjusted_quantity\": 10,\n  \"new_quantity\": 150,\n  \"adjustment_reason\": \"restock\",\n  \"adjusted_by\": \"user123\"\n}\n\n# Send event to Kafka topic\nproducer.send('inventory.adjusted', event_data)\nproducer.flush()\n```\n\n### Consuming the Event\n\nTo consume an Inventory Adjusted event, use the following example Kafka consumer configuration in Python:\n\n```python title=\"Consuming the event with python\" frame=\"terminal\"\nfrom kafka import KafkaConsumer\nimport json\n\n# Kafka configuration\nconsumer = KafkaConsumer(\n    'inventory.adjusted',\n    bootstrap_servers=['localhost:9092'],\n    auto_offset_reset='earliest',\n    enable_auto_commit=True,\n    group_id='inventory_group',\n    value_serializer=lambda v: json.dumps(v).encode('utf-8')\n)\n\n# Consume events\nfor message in consumer:\n    event_data = json.loads(message.value)\n    print(f\"Received Inventory Adjusted event: {event_data}\")\n```\n\n<Footer />"},{"id":"InventoryAdjusted-aby9almf65","name":"Inventory adjusted","version":"1.0.0","summary":"Indicates a change in inventory level\n","owners":["dboyne","msmith","asmith","full-stack","mobile-devs"],"badges":[{"content":"Recently updated!","backgroundColor":"green","textColor":"green"},{"content":"Channel:Apache Kafka","backgroundColor":"yellow","textColor":"yellow"}],"markdown":"## Overview\n\nThe `Inventory Adjusted` event is triggered whenever there is a change in the inventory levels of a product. This could occur due to various reasons such as receiving new stock, sales, returns, or manual adjustments by the inventory management team. The event ensures that all parts of the system that rely on inventory data are kept up-to-date with the latest inventory levels.\n\n<NodeGraph />\n\n## Event Details\n\n### Event Name\n`inventory.adjusted`\n\n### Description\nThis event indicates that the inventory count for one or more products has been adjusted. The event carries the updated inventory details including the product ID, the new quantity, and the reason for the adjustment.\n\n### Payload\nThe payload of the `Inventory Adjusted` event includes the following fields:\n\n```json title=\"Example of payload\" frame=\"terminal\"\n{\n  \"event_id\": \"string\",\n  \"timestamp\": \"ISO 8601 date-time\",\n  \"product_id\": \"string\",\n  \"adjusted_quantity\": \"integer\",\n  \"new_quantity\": \"integer\",\n  \"adjustment_reason\": \"string\",\n  \"adjusted_by\": \"string\"\n}\n```\n\n### Producing the Event\n\nTo produce an Inventory Adjusted event, use the following example Kafka producer configuration in Python:\n\n```python title=\"Produce event in Python\" frame=\"terminal\"\nfrom kafka import KafkaProducer\nimport json\nfrom datetime import datetime\n\n# Kafka configuration\nproducer = KafkaProducer(\n    bootstrap_servers=['localhost:9092'],\n    value_serializer=lambda v: json.dumps(v).encode('utf-8')\n)\n\n# Event data\nevent_data = {\n  \"event_id\": \"abc123\",\n  \"timestamp\": datetime.utcnow().isoformat() + 'Z',\n  \"product_id\": \"prod987\",\n  \"adjusted_quantity\": 10,\n  \"new_quantity\": 150,\n  \"adjustment_reason\": \"restock\",\n  \"adjusted_by\": \"user123\"\n}\n\n# Send event to Kafka topic\nproducer.send('inventory.adjusted', event_data)\nproducer.flush()\n```\n\n### Consuming the Event\n\nTo consume an Inventory Adjusted event, use the following example Kafka consumer configuration in Python:\n\n```python title=\"Consuming the event with python\" frame=\"terminal\"\nfrom kafka import KafkaConsumer\nimport json\n\n# Kafka configuration\nconsumer = KafkaConsumer(\n    'inventory.adjusted',\n    bootstrap_servers=['localhost:9092'],\n    auto_offset_reset='earliest',\n    enable_auto_commit=True,\n    group_id='inventory_group',\n    value_serializer=lambda v: json.dumps(v).encode('utf-8')\n)\n\n# Consume events\nfor message in consumer:\n    event_data = json.loads(message.value)\n    print(f\"Received Inventory Adjusted event: {event_data}\")\n```"},{"id":"InventoryAdjusted-gmw06wnnjxi","name":"Inventory adjusted","version":"0.0.1","summary":"Indicates a change in inventory level\n","owners":["dboyne"],"badges":[{"content":"Recently updated!","backgroundColor":"green","textColor":"green"}],"markdown":"<Admonition>When firing this event make sure you set the `correlation-id` in the headers. Our schemas have standard metadata make sure you read and follow it.</Admonition>\n\n### Details\n\n<NodeGraph />"}]
