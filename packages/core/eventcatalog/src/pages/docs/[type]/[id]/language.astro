---
import Footer from '@layouts/Footer.astro';
import VerticalSideBarLayout from '@layouts/VerticalSideBarLayout.astro';
import { getDomains, type Domain, getUbiquitousLanguage } from '@utils/collections/domains';
import type { CollectionEntry } from 'astro:content';
import { ViewTransitions } from 'astro:transitions';
import * as LucideIcons from 'lucide-react';

export async function getStaticPaths() {
  const domains = await getDomains();

  const buildPages = (collection: CollectionEntry<'domains'>[]) => {
    return collection.map((item) => ({
      params: {
        type: item.collection,
        id: item.data.id,
      },
      props: {
        type: item.collection,
        ...item,
      },
    }));
  };

  return [...buildPages(domains)];
}

const props = Astro.props;
const pageTitle = `${props.collection} | ${props.data.name}`.replace(/^\w/, (c) => c.toUpperCase());
const ubiquitousLanguages = await getUbiquitousLanguage(props);

const ubiquitousLanguage = ubiquitousLanguages[0];
---

<VerticalSideBarLayout title={pageTitle} description={props.data.summary}>
  <main class="flex sm:px-8 docs-layout h-full">
    <div class="flex docs-layout w-full">
      <div class="w-full lg:mr-2 pr-8 overflow-y-auto py-8 min-h-[50em]">
        <nav class="flex mb-4" aria-label="Breadcrumb">
          <ol class="inline-flex items-center space-x-1 md:space-x-3">
            <li class="inline-flex items-center">
              <a
                href={`/docs/${props.type}/${props.data.id}/${props.data.latestVersion}`}
                class="inline-flex items-center text-sm font-medium text-gray-500 hover:text-primary"
              >
                <svg
                  class="w-3 h-3 mr-2.5"
                  aria-hidden="true"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke-width="2"
                  stroke="currentColor"
                >
                  <path stroke-linecap="round" stroke-linejoin="round" d="M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18"></path>
                </svg>
                Back to Documentation
              </a>
            </li>
          </ol>
        </nav>

        <div class="border-b border-gray-200 flex justify-between items-start md:pb-2">
          <div>
            <h2 id="doc-page-header" class="text-2xl md:text-4xl font-bold text-black">Domain Language Explorer</h2>
            <h2 class="text-2xl pt-2 text-gray-500 font-light">{props.data.name} domain</h2>
          </div>
        </div>

        {
          !ubiquitousLanguage && (
            <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4 my-4">
              <p class="text-yellow-700">
                This domain does not have any defined ubiquitous language terms yet. Consider adding some terms to help establish
                a common vocabulary for your domain.
              </p>
            </div>
          )
        }

        <div class="py-4 w-full min-h-[calc(100vh-10em)]">
          {
            ubiquitousLanguage && (
              <div>
                <div class="mb-6">
                  <input
                    type="text"
                    id="searchInput"
                    placeholder="Search terms..."
                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>

                {!ubiquitousLanguage ? (
                  <div class="text-center py-12 bg-gray-50 rounded-lg">
                    <h3 class="text-lg font-medium text-gray-900">No domain language terms</h3>
                    <p class="mt-2 text-sm text-gray-500">There are no language terms defined for this domain yet.</p>
                  </div>
                ) : (
                  <div id="termsGrid" class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    {ubiquitousLanguage?.data?.dictionary?.map((term) => (
                      <div class="term-card block bg-white border border-gray-200 rounded-lg p-6 transition-all duration-300 ease-in-out hover:shadow-md hover:border-primary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-primary focus:ring-white min-h-[12em] cursor-pointer">
                        <div class="flex flex-col h-full space-y-8">
                          {term.icon && (
                            <div>
                              {(() => {
                                const Icon = LucideIcons[term.icon as keyof typeof LucideIcons];
                                //@ts-ignore
                                return Icon ? <Icon className="w-6 h-6 text-primary" /> : null;
                              })()}
                            </div>
                          )}
                          <div>
                            <h3 class="text-gray-800 text-lg font-semibold transition-colors duration-300 ease-in-out group-hover:text-gray-300">
                              {term.name}
                            </h3>
                            <div class="term-content">
                              <p class="summary-text text-gray-600 transition-colors duration-300 ease-in-out group-hover:text-gray-200 m-0 font-light text-sm mb-4">
                                {term.summary}
                              </p>
                              {term.description && (
                                <div>
                                  <p class="description-text hidden text-gray-600 transition-colors duration-300 ease-in-out group-hover:text-gray-200 m-0 font-light text-sm whitespace-pre-line">
                                    {term.description}
                                  </p>
                                  <span class="show-more-text text-sm text-primary font-medium">Show more</span>
                                </div>
                              )}
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}

                <div id="noSearchResults" class="hidden text-center py-12 bg-gray-50 rounded-lg">
                  <h3 class="text-lg font-medium text-gray-900">No matching terms</h3>
                  <p class="mt-2 text-sm text-gray-500">Try adjusting your search terms.</p>
                </div>
              </div>
            )
          }
        </div>

        <Footer />
      </div>
    </div>
    <ViewTransitions />
  </main>

  <script>
    function initializeSearch() {
      const searchInput = document.getElementById('searchInput');
      const termCards = document.querySelectorAll('.term-card');
      const noSearchResults = document.getElementById('noSearchResults');

      searchInput?.addEventListener('input', (e) => {
        const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
        let visibleCount = 0;

        termCards.forEach((card) => {
          const title = card.querySelector('h3')?.textContent?.toLowerCase() || '';
          const description = card.querySelector('p')?.textContent?.toLowerCase() || '';
          const matches = title.includes(searchTerm) || description.includes(searchTerm);

          card.classList.toggle('hidden', !matches);
          if (matches) visibleCount++;
        });

        // Show/hide no results message
        if (noSearchResults) {
          noSearchResults.classList.toggle('hidden', visibleCount > 0);
        }
      });
    }

    function initializeShowMore() {
      const cards = document.querySelectorAll('.term-card');

      cards.forEach((card) => {
        const newCard = card.cloneNode(true);
        if (card.parentNode) {
          card.parentNode.replaceChild(newCard, card);
          // Initially show summary
          const summary = (newCard as Element).querySelector('.summary-text');
          summary?.classList.add('visible');
        }
        newCard.addEventListener('click', () => {
          const description = (newCard as Element).querySelector('.description-text');
          const summary = (newCard as Element).querySelector('.summary-text');
          const showMoreText = (newCard as Element).querySelector('.show-more-text');

          if (description && summary && showMoreText) {
            (newCard as Element).classList.toggle('expanded');
            description.classList.toggle('visible');
            summary.classList.toggle('visible');
            showMoreText.textContent = description.classList.contains('visible') ? 'Show less' : 'Show more';
          }
        });
      });
    }

    function highlightMatchingTerm() {
      const urlParams = new URLSearchParams(window.location.search);
      const termId = urlParams.get('id');

      if (termId) {
        const cards = document.querySelectorAll('.term-card');
        cards.forEach((card) => {
          const termName = card.querySelector('h3')?.textContent?.trim();
          if (termName?.toLowerCase() === termId.toLowerCase()) {
            // Add highlight class
            card.classList.add('highlighted');
            (card as HTMLElement).click();

            setTimeout(() => {
              // Scroll into view
              card.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }, 300);
          }
        });
      }
    }

    document.addEventListener('astro:page-load', () => {
      initializeShowMore();
      initializeSearch();
      highlightMatchingTerm();
    });

    initializeShowMore();
    initializeSearch();
    highlightMatchingTerm();
  </script>

  <style is:global>
    .term-card {
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      min-height: 12em;
    }

    .term-card.expanded {
      min-height: 24em;
      background-color: rgb(249 250 251);
      z-index: 10;
      box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1);
    }

    .summary-text,
    .description-text {
      transition:
        opacity 0.3s ease-in-out,
        max-height 0.3s ease-in-out;
      opacity: 0;
      max-height: 0;
      overflow: hidden;
      display: none;
    }

    .summary-text.visible,
    .description-text.visible {
      opacity: 1;
      max-height: 500px;
      margin-bottom: 1rem;
      display: block;
    }

    .description-text {
      white-space: pre-line;
      line-height: 1.5;
    }

    .show-more-text {
      display: block;
      margin-top: 0.5rem;
    }

    .term-card.expanded .show-more-text {
      display: none;
    }

    .term-card.highlighted {
      border-color: var(--color-primary);
      box-shadow: 0 0 0 2px var(--color-primary);
      animation: pulse 1s;
    }

    @keyframes pulse {
      0%,
      100% {
        transform: scale(1);
        box-shadow: 0 0 0 2px var(--color-primary);
      }
      50% {
        transform: scale(1.01);
        box-shadow: 0 0 0 4px var(--color-primary);
      }
    }
  </style>
</VerticalSideBarLayout>
