---
const { catalog, id } = Astro.props;
import fs from 'node:fs/promises';
import { existsSync } from 'fs';
import yaml from 'js-yaml';
import path from 'path';
import SchemaViewerClient from './SchemaViewer';
import Admonition from '../Admonition';
let schemas = [];

function findSchemaViewers(document: string) {
  // Define regex pattern to match <SchemaViewer ... />
  const pattern = /<SchemaViewer\s+([^>]*)\/>/g;

  // Find all matches of the pattern
  const matches = [...document.matchAll(pattern)];

  // Extract the properties of each SchemaViewer
  const schemaViewers = matches.map((match) => {
    const propsString = match[1];
    const props = {};

    // Use regex to extract key-value pairs from propsString
    const propsPattern = /(\w+)=["']([^"']+)["']/g;
    let propMatch;
    while ((propMatch = propsPattern.exec(propsString)) !== null) {
      const key = propMatch[1];
      const value = propMatch[2];
      // @ts-ignore
      props[key] = value;
    }

    return props;
  });

  return schemaViewers;
}

try {
  const file = await fs.readFile(catalog.astroContentFilePath, 'utf-8');
  const schemaViewers = findSchemaViewers(file);

  // Loop around all the possible SchemaViewers in the file.
  const getAllComponents = schemaViewers.map(async (schemaViewerProps: any) => {
    const schemaPath = path.join(catalog.filePath, schemaViewerProps.file);
    const exists = existsSync(schemaPath);
    let schema;

    if (exists) {
      // Load the schema for the component
      schema = await fs.readFile(schemaPath, 'utf-8');
      if (schemaPath.endsWith('.yml') || schemaPath.endsWith('.yaml')) {
        schema = yaml.load(schema);
      } else {
        schema = JSON.parse(schema);
      }
    }

    return {
      id: schemaViewerProps.id || id,
      exists,
      schema,
      schemaPath,
      ...schemaViewerProps,
    };
  });

  schemas = await Promise.all(getAllComponents);
} catch (error) {
  console.log('Failed to process schemas');
  console.log(error);
}
---

<section class="space-y-4">
  {
    schemas.length > 0 &&
      schemas.map((schema) => (
        <div>
          {schema.exists && <SchemaViewerClient {...schema} client:only="react" />}

          {/* User has tried to load the schema, but it was not found on file system */}
          {!schema.exists && (
            <Admonition type="warning">
              <div>
                <span class="block font-bold">{`<SchemaViewer/>`} failed to load</span>
                <span class="block">Tried to load schema from {schema.schemaPath}, but no schema can be found</span>
              </div>
            </Admonition>
          )}
        </div>
      ))
  }
</section>
