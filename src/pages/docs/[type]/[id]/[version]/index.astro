---
import DocsLayout from '@layouts/DocsLayout.astro';
import Footer from '@layouts/Footer.astro';

import components from '@components/MDX/components';
import NodeGraph from '@components/MDX/NodeGraph/NodeGraph.astro';
import SchemaViewer from '@components/MDX/SchemaViewer/SchemaViewer.astro';

// SideBars
import ServiceSideBar from '@components/SideBars/ServiceSideBar.astro';
import MessageSideBar from '@components/SideBars/MessageSideBar.astro';
import DomainSideBar from '@components/SideBars/DomainSideBar.astro';

import { QueueListIcon, RectangleGroupIcon, ServerIcon, BoltIcon, ChatBubbleLeftIcon } from '@heroicons/react/24/outline';
import type { PageTypes } from '@types';

import { buildUrl } from '@utils/url-builder';
import { getFlows } from '@utils/flows/flows';
import { pageDataLoader } from '@utils/pages/pages';

type PageTypesWithFlows = PageTypes | 'flows';

export async function getStaticPaths() {
  const loaders = {
    ...pageDataLoader,
    flows: getFlows,
  };

  const itemTypes: PageTypesWithFlows[] = ['events', 'commands', 'services', 'domains', 'flows'];
  const allItems = await Promise.all(itemTypes.map((type) => loaders[type]()));

  return allItems.flatMap((items, index) =>
    items.map((item) => ({
      params: {
        type: itemTypes[index],
        id: item.data.id,
        version: item.data.version,
      },
      props: {
        type: itemTypes[index],
        ...item,
      },
    }))
  );
}

const props = Astro.props;

const { Content } = await props.render();

// Capitalize the first letter of a string
const pageTitle = `${props.collection} | ${props.data.name}`.replace(/^\w/, (c) => c.toUpperCase());
const contentBadges = props.data.badges || [];

const getBadge = () => {
  if (props.collection === 'services') {
    return { backgroundColor: 'pink', textColor: 'pink', content: 'Service', icon: ServerIcon, class: 'text-pink-400' };
  }
  if (props.collection === 'events') {
    return { backgroundColor: 'orange', textColor: 'orange', content: 'Event', icon: BoltIcon, class: 'text-orange-400' };
  }
  if (props.collection === 'commands') {
    return { backgroundColor: 'blue', textColor: 'blue', content: 'Command', icon: ChatBubbleLeftIcon, class: 'text-blue-400' };
  }
  if (props.collection === 'domains') {
    return {
      backgroundColor: 'yellow',
      textColor: 'yellow',
      content: 'Domain',
      icon: RectangleGroupIcon,
      class: 'text-yellow-400',
    };
  }

  if (props.collection === 'flows') {
    return { backgroundColor: 'teal', textColor: 'teal', content: 'Flow', icon: QueueListIcon, class: 'text-gray' };
  }

  return { backgroundColor: 'teal', textColor: 'teal', content: '', icon: QueueListIcon, class: 'text-gray' };
};

const getSpecificationBadges = () => {
  const badges = [];
  const hasOpenAPISpec = !!props.data.specifications?.openapiPath;
  const hasAsyncAPISpec = !!props.data.specifications?.asyncapiPath;

  if (hasOpenAPISpec) {
    badges.push({
      backgroundColor: 'white',
      textColor: 'gray',
      content: 'OpenAPI Spec',
      iconURL: buildUrl('/icons/openapi.svg'),
      class: 'text-black hover:underline',
      id: 'open-api-badge',
      url: buildUrl(`/docs/${props.collection}/${props.data.id}/${props.data.version}/spec`),
    });
  }

  if (hasAsyncAPISpec) {
    badges.push({
      backgroundColor: 'white',
      textColor: 'gray',
      content: 'AsyncAPI Spec',
      iconURL: buildUrl('/icons/asyncapi.svg'),
      class: 'text-black hover:underline',
      id: 'asyncapi-badge',
      url: buildUrl(`/docs/${props.collection}/${props.data.id}/${props.data.version}/asyncapi`),
    });
  }

  return badges;
};

const badges = [getBadge(), ...contentBadges, ...getSpecificationBadges()];
---

<DocsLayout title={pageTitle} description={props.data.summary}>
  <!-- <main class="flex py-8 sm:px-8 docs-layout"> -->
  <div class="flex min-h-screen docs-layout">
    <main class="flex-1 w-full lg:pr-10 md:pt-4">
      <div class="border-b border-gray-200 flex justify-between items-start py-4 md:pb-6">
        <div>
          <h2 class="text-2xl md:text-4xl font-bold">
            {props.data.name}
            <span class="text-gray-300">(v{props.data.version})</span>
          </h2>
          <h2 class="text-lg pt-2 text-gray-500 font-light">{props.data.summary}</h2>
          {
            badges && (
              <div class="flex flex-wrap py-2 pt-4">
                {badges.map((badge: any) => {
                  return (
                    <a href={badge.url || '#'}>
                      <span
                        id={badge.id || ''}
                        class={`text-sm font-light text-gray-500 px-2 py-1 rounded-md mr-2 bg-${badge.backgroundColor}-100 space-x-1 border border-${badge.backgroundColor}-200 text-${badge.textColor}-800 flex items-center ${badge.class ? badge.class : ''} `}
                      >
                        {badge.icon && <badge.icon className="w-4 h-4 inline-block mr-1 " />}
                        {badge.iconURL && <img src={badge.iconURL} class="w-5 h-5 inline-block " />}
                        <span>{badge.content}</span>
                      </span>
                    </a>
                  );
                })}
              </div>
            )
          }
        </div>
      </div>

      <div>
        {
          props.data.version !== props.data.latestVersion && (
            <div class="rounded-md bg-yellow-50 p-4 not-prose my-4">
              <div class="flex">
                <div class="flex-shrink-0">
                  <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                    <path
                      fill-rule="evenodd"
                      d="M8.485 2.495c.673-1.167 2.357-1.167 3.03 0l6.28 10.875c.673 1.167-.17 2.625-1.516 2.625H3.72c-1.347 0-2.189-1.458-1.515-2.625L8.485 2.495zM10 5a.75.75 0 01.75.75v3.5a.75.75 0 01-1.5 0v-3.5A.75.75 0 0110 5zm0 9a1 1 0 100-2 1 1 0 000 2z"
                      clip-rule="evenodd"
                    />
                  </svg>
                </div>
                <div class="ml-3">
                  <h3 class="text-sm font-medium text-yellow-800">New version found</h3>
                  <div class="mt-2 text-sm text-yellow-700">
                    <p>
                      You are looking at a previous version of the {props.collection.slice(0, props.collection.length - 1)}{' '}
                      <strong>{props.data.name}</strong>.{' '}
                      <a
                        class="underline hover:text-purple-500 block pt-2"
                        href={buildUrl(`/docs/${props.collection}/${props.data.id}/${props.data.latestVersion}`)}
                      >
                        The latest version of this {props.collection.slice(0, props.collection.length - 1)} is v
                        {props.data.latestVersion} &rarr;
                      </a>
                    </p>
                  </div>
                </div>
              </div>
            </div>
          )
        }
      </div>

      <div class="prose prose-md py-4 w-full">
        <Content components={components(props)} />
      </div>
      <div>
        <!-- @ts-ignore -->
        <SchemaViewer id={props.data.id} catalog={props.catalog} />
        <NodeGraph
          id={props.data.id}
          collection={props.collection}
          version={props.data.version}
          mode="simple"
          href={{
            label: 'Open in Visualiser',
            url: buildUrl(`/visualiser/${props.collection}/${props.data.id}/${props.data.version}`),
          }}
        />
      </div>
      <Footer />
    </main>
    <aside class="hidden lg:block sticky top-20 h-[calc(100vh-theme(spacing.16))] w-56 overflow-y-auto">
      <!-- @ts-ignore -->
      {(props?.collection === 'events' || props.collection === 'commands') && <MessageSideBar message={props} />}
      {props?.collection === 'services' && <ServiceSideBar service={props} />}
      {props?.collection === 'domains' && <DomainSideBar domain={props} />}
    </aside>
  </div>
</DocsLayout>

<style is:global>
  .docs-layout .prose {
    max-width: none;
  }

  .mermaid svg {
    margin: 1em auto 2em;
  }

  .mermaid tspan {
    font-size: 8em;
  }
</style>

<script define:vars={{ props }}>
  // Fix to pass information to componets that are client side only
  // and require catalog information
  window.eventcatalog = {};
  // @ts-ignore
  window.eventcatalog[`${props.collection}-${props.data.id}`] = props.catalog;
</script>

<script>
  /**
   * @params {HTMLCollectionOf<HTMLElement>} graphs
   */
  async function renderDiagrams(graphs: any) {
    const { default: mermaid } = await import('mermaid');
    mermaid.initialize({
      fontSize: 2,
      flowchart: {
        curve: 'linear',
        rankSpacing: 0,
        nodeSpacing: 0,
      },
      startOnLoad: false,
      fontFamily: 'var(--sans-font)',
      // @ts-ignore This works, but TS expects a enum for some reason
      theme: window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'default',
    });

    for (const graph of graphs) {
      const content = graph.getAttribute('data-content');
      if (!content) continue;
      let svg = document.createElement('svg');
      const id = (svg.id = 'mermaid-' + Math.round(Math.random() * 100000));
      graph.appendChild(svg);
      mermaid.render(id, content).then((result) => {
        graph.innerHTML = result.svg;
      });
    }
  }

  const graphs = document.getElementsByClassName('mermaid');
  if (document.getElementsByClassName('mermaid').length > 0) {
    renderDiagrams(graphs);
  }
</script>
