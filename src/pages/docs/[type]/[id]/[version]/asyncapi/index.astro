---
import path from 'path';
import { readFileSync } from 'fs';
import { createElement } from 'react';
import { renderToString } from 'react-dom/server';
import { Parser } from '@asyncapi/parser';
import { AvroSchemaParser } from '@asyncapi/avro-schema-parser';

import type { CollectionTypes, PageTypes } from '@types';

import '@asyncapi/react-component/styles/default.min.css';
import js from '@asyncapi/react-component/browser/standalone/without-parser.js?url';
import { AsyncApiComponentWP, type ConfigInterface } from '@asyncapi/react-component';
import { pageDataLoader } from '@utils/page-loaders/page-data-loader';
import type { CollectionEntry } from 'astro:content';
import VerticalSideBarLayout from '@layouts/VerticalSideBarLayout.astro';
import Config from '@utils/eventcatalog-config/catalog';

export async function getStaticPaths() {
  const itemTypes: PageTypes[] = ['events', 'commands', 'queries', 'services', 'domains'];
  const allItems = await Promise.all(itemTypes.map((type) => pageDataLoader[type]()));

  const hasAsyncAPISpec = (item: CollectionEntry<CollectionTypes>) => item.data.specifications?.asyncapiPath !== undefined;
  const filteredItems = allItems.map((items) => items.filter(hasAsyncAPISpec));

  return filteredItems.flatMap((items, index) =>
    items.map((item) => ({
      params: {
        id: item.data.id,
        type: itemTypes[index],
        version: item.data.version,
      },
      props: {
        type: itemTypes[index],
        ...item,
      },
    }))
  );
}

// @ts-ignore
const { catalog, data } = Astro.props;
const fileName = data.specifications?.asyncapiPath || 'asyncapi.yaml';
const pathToSpec = path.join(catalog.publicPath, fileName);
const pathOnDisk = path.join(process.cwd(), 'public', pathToSpec);
const fileContent = readFileSync(pathOnDisk, 'utf-8');

// AsyncAPI parser will parser schemas for users, they can turn this off.
const parseSchemas = Config?.asyncAPI?.renderParsedSchemas ?? true;
const parsed = await new Parser({ schemaParsers: [AvroSchemaParser()] }).parse(fileContent, { parseSchemas });
const stringified = parsed.document?.json();
const config: ConfigInterface = { show: { sidebar: true, errors: true } };

const component = createElement(AsyncApiComponentWP, { schema: { stringified }, config });
const renderedComponent = renderToString(component);
---

<VerticalSideBarLayout title="AsyncApi Spec">
  <div id="asyncapi" class="md:pr-14" set:html={renderedComponent} />
</VerticalSideBarLayout>

<script is:inline src={js}></script>
<script define:vars={{ schema: stringified, config }}>
  const root = document.getElementById('asyncapi');
  AsyncApiStandalone.hydrate({ schema, config }, root);
</script>

<style>
  #asyncapi {
    @media screen and (min-width: 1417px) {
      .sidebar {
        z-index: 1 !important;
      }
    }
  }
</style>
