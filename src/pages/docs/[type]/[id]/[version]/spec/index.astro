---
import type { CollectionEntry } from 'astro:content';
import * as path from 'path';
import fs from 'node:fs';

import { getEvents } from '@utils/events';
import { getServices } from '@utils/services/services';
import { getCommands } from '@utils/commands';
import { getDomains } from '@utils/domains/domains';
import type { CollectionTypes } from '@types';
import PlainPage from '@layouts/PlainPage.astro';
import { DocumentMinusIcon } from '@heroicons/react/24/outline';
import { buildUrl } from '@utils/url-builder';

export async function getStaticPaths() {
  const events = await getEvents();
  const commands = await getCommands();
  const services = await getServices();
  const domains = await getDomains();

  const hasOpenAPISpec = (item: CollectionEntry<CollectionTypes>) => item.data.specifications?.openapiPath !== undefined;

  const buildPages = (collection: CollectionEntry<CollectionTypes>[]) => {
    const filteredCollection = collection.filter(hasOpenAPISpec);

    return filteredCollection.map((item) => ({
      params: {
        type: item.collection,
        id: item.data.id,
        version: item.data.version,
      },
      props: {
        type: item.collection,
        ...item,
      },
    }));
  };

  return [...buildPages(domains), ...buildPages(events), ...buildPages(services), ...buildPages(commands)];
}

// @ts-ignore
const { data, catalog } = Astro.props;
const fileName = data.specifications?.openapiPath || 'openapi.yml';
const pathToSpec = path.join(catalog.publicPath, fileName);
const pathOnDisk = path.join(process.cwd(), 'public', pathToSpec);
const fileExists = fs.existsSync(pathOnDisk);
---

<PlainPage title="OpenAPI Spec">
  {
    !fileExists ? (
      <div class="text-center h-screen  flex flex-col justify-center ">
        <DocumentMinusIcon className="mx-auto h-12 w-12 text-gray-400" />
        <h3 class="mt-2 text-sm font-semibold text-gray-900">No OpenAPI spec file found</h3>
        <p class="mt-1 text-xs text-gray-400">
          Could not find OpenAPI file for {data.name} in {`/${catalog.path}`}
        </p>
      </div>
    ) : (
      <rapi-doc
        spec-url={buildUrl(pathToSpec, true)}
        show-header="false"
        allow-authentication="true"
        allow-try="true"
        class="relative top-0"
        style={{ height: '100vh', width: '100%', zIndex: 100 }}
        regular-font="ui-sans-serif, system-ui, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji"
        schema-style="table"
        default-schema-tab="schema"
        bg-color="#ffffff"
        text-color=""
        nav-bg-color="#fff"
        nav-text-color=""
        nav-hover-bg-color="#fff"
        nav-hover-text-color="#6b21a8"
        nav-accent-color=""
        primary-color="#6b21a8"
        theme="light"
        render-style="read"
      />
    )
  }
</PlainPage>

<script>
  // @ts-ignore
  await import('rapidoc');
</script>

<style>
  rapi-doc::part(section-servers) {
    /* <<< targets the server div */
    /* background: #6b5b95; */
    border: 2px solid #f1edff;
    color: black;
    margin: 0 24px 0 24px;
    border-radius: 5px;
  }
  rapi-doc::part(label-selected-server) {
    /* <<< targets selected server label */
    color: black;
  }

  rapi-doc::part(section-navbar-search) {
    margin: 0;
    padding: 0;
    margin-bottom: 1em;
  }
  rapi-doc::part(section-overview) {
    margin: 0 2em 0 2em;
    padding: 1em 0 1em;
  }
  rapi-doc::part(section-auth) {
    margin: 2em 2em;
    padding: 0;
  }
  rapi-doc::part(section-tag) {
    margin: 2em 2em;
    padding: 0;
  }
  rapi-doc::part(section-tag-title) {
    margin: 0.5em 0 0;
    padding: 0;
  }
  rapi-doc::part(section-operations-in-tag) {
    margin: 1em 2em;
    padding: 0;
  }
  rapi-doc::part(section-navbar) {
    border-right: 1px solid #f1edff;
    padding: 1em 1em 0 0;
  }
</style>
