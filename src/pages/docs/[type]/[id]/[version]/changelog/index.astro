---
import Layout from '@layouts/DocsLayout.astro';
import Footer from '@layouts/Footer.astro';

import type { PageTypes } from '@types';
import { getChangeLogs } from '@utils/changelogs/changelogs';
import { RectangleGroupIcon, ServerIcon, BoltIcon, ChatBubbleLeftIcon } from '@heroicons/react/24/outline';
import { pageDataLoader } from '@utils/pages/pages';

import { buildUrl } from '@utils/url-builder';

export async function getStaticPaths() {
  const itemTypes: PageTypes[] = ['events', 'commands', 'services', 'domains'];
  const allItems = await Promise.all(itemTypes.map((type) => pageDataLoader[type]()));

  return allItems.flatMap((items, index) =>
    items.map((item) => ({
      params: {
        type: itemTypes[index],
        id: item.data.id,
        version: item.data.version,
      },
      props: {
        type: itemTypes[index],
        ...item,
      },
    }))
  );
}

const props = Astro.props;
const logs = await getChangeLogs(props);

const { data } = props;
const latestVersion = data.latestVersion;

const renderedLogs = await logs.map(async (log) => {
  const { Content } = await log.render();
  return {
    Content,
    ...log,
  };
});

const logsToRender = await Promise.all(renderedLogs);

const logList = logsToRender.map((log, index) => ({
  id: log.id,
  url: buildUrl(`/docs/${props.collection}/${props.data.id}`),
  isLatest: log.data.version === latestVersion,
  version: log.data.version,
  createdAt: log.data.createdAt,
  badges: log.data.badges || [],
  Content: log.Content,
}));

const getBadge = () => {
  if (props.collection === 'services') {
    return { backgroundColor: 'pink', textColor: 'pink', content: 'Service', icon: ServerIcon, class: 'text-pink-400' };
  }
  if (props.collection === 'events') {
    return { backgroundColor: 'orange', textColor: 'orange', content: 'Event', icon: BoltIcon, class: 'text-orange-400' };
  }
  if (props.collection === 'commands') {
    return { backgroundColor: 'blue', textColor: 'blue', content: 'Command', icon: ChatBubbleLeftIcon, class: 'text-blue-400' };
  }
  if (props.collection === 'domains') {
    return {
      backgroundColor: 'yellow',
      textColor: 'yellow',
      content: 'Domain',
      icon: RectangleGroupIcon,
      class: 'text-yellow-400',
    };
  }
};

const badges = [getBadge()];
---

<Layout title="ChangeLog">
  <main class="flex-1 w-full lg:pr-10 md:pt-4">
    <div class="border-b border-gray-200 flex justify-between items-start py-4 w-full">
      <div>
        <h2 class="text-2xl md:text-4xl font-bold">{props.data.name} (Changelog)</h2>
        <h2 class="text-lg pt-2 text-gray-500 font-light">{props.data.summary}</h2>
        {
          badges && (
            <div class="flex flex-wrap py-2 pt-4">
              {badges.map((badge: any) => (
                <span
                  class={`text-sm font-light text-gray-500 px-2 py-1 rounded-md mr-2 bg-${badge.backgroundColor}-100 space-x-1 border border-${badge.backgroundColor}-200 text-${badge.textColor}-800 flex items-center ${badge.class ? badge.class : ''} `}
                >
                  {badge.icon && <badge.icon className="w-4 h-4 inline-block mr-1 " />}
                  <span>{badge.content}</span>
                </span>
              ))}
            </div>
          )
        }
      </div>
    </div>
    {
      logList.length === 0 && (
        <div class="py-4 text-gray-400 prose prose-md">
          <p>No changelogs found.</p>
        </div>
      )
    }
    <div class="flow-root py-8">
      <ul role="list" class="-mb-8">
        {
          logList.map((log, index) => (
            <li>
              <div class="relative pb-8">
                {index !== logList.length - 1 ? (
                  <span aria-hidden="true" class="absolute left-6 top-4 -ml-px h-full w-0.5 bg-gray-200" />
                ) : null}
                <div class="relative flex space-x-3">
                  <div>
                    <a
                      href={buildUrl(`${log.url}/${log.version}`)}
                      class={
                        'bg-purple-500 hover:bg-purple-400 text-white flex h-8 w-14 items-center justify-center rounded-full ring-8 ring-white'
                      }
                    >
                      {log.version}
                      {/* <DocumentTextIcon aria-hidden="true" className="h-5 w-5 text-white" /> */}
                    </a>
                  </div>
                </div>
                <div class="pl-[70px] py-2 -mt-10">
                  {log.createdAt && (
                    <div class="pb-2">
                      <h3 class="text-2xl text-gray-800 font-bold">
                        <span>
                          {log.createdAt.toISOString().split('T')[0]} {`${log.isLatest ? '(latest)' : ''}`}
                        </span>
                      </h3>
                    </div>
                  )}
                  {log.badges && (
                    <div class="flex flex-wrap">
                      {log.badges.map((badge: any) => (
                        <span
                          class={`text-sm font-light text-gray-500 px-2 py-1 rounded-md mr-2 bg-${badge.backgroundColor}-100 space-x-1 border border-${badge.backgroundColor}-200 text-${badge.textColor}-800 flex items-center ${badge.class ? badge.class : ''} `}
                        >
                          {badge.icon && <badge.icon className="w-4 h-4 inline-block mr-1 " />}
                          <span>{badge.content}</span>
                        </span>
                      ))}
                    </div>
                  )}
                  <div class="prose prose-md !max-w-none py-2">
                    <log.Content />
                  </div>
                </div>
              </div>
            </li>
          ))
        }
      </ul>
    </div>
    <Footer />
  </main>
</Layout>
