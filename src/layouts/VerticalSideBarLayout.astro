---
interface Props {
  title: string;
  sidebar?: boolean;
  description?: string;
}

import { BookOpenText, Workflow, TableProperties, House } from 'lucide-react';
import Header from '../components/Header.astro';
import SEO from '../components/Seo.astro';

import { getCommands } from '@utils/commands';
import { getDomains } from '@utils/domains/domains';
import { getEvents } from '@utils/events';
import { getServices } from '@utils/services/services';
import { getFlows } from '@utils/flows/flows';
import { getTeams } from '@utils/teams';
import { getUsers } from '@utils/users';
import config, { type CatalogConfig } from '@eventcatalog';
import { buildUrl } from '@utils/url-builder';
import { getQueries } from '@utils/queries';
import CatalogResourcesSideBar from '@components/SideBars/CatalogResourcesSideBar';

const events = await getEvents({ getAllVersions: false });
const commands = await getCommands({ getAllVersions: false });
const queries = await getQueries({ getAllVersions: false });
const services = await getServices({ getAllVersions: false });
const domains = await getDomains({ getAllVersions: false });
const flows = await getFlows({ getAllVersions: false });
const teams = await getTeams();
const users = await getUsers();

const messages = [...events, ...commands, ...queries];

// @ts-ignore for large catalogs https://github.com/event-catalog/eventcatalog/issues/552
const allData = [...domains, ...services, ...messages, ...flows, ...teams, ...users];

const currentPath = Astro.url.pathname;

const getDefaultUrl = (route: string, defaultValue: string) => {
  if (domains.length > 0) return buildUrl(`/${route}/domains/${domains[0].data.id}/${domains[0].data.latestVersion}`);
  if (services.length > 0) return buildUrl(`/${route}/services/${services[0].data.id}/${services[0].data.latestVersion}`);
  if (messages.length > 0)
    return buildUrl(`/${route}/${messages[0].collection}/${messages[0].data.id}/${messages[0].data.latestVersion}`);
  if (flows.length > 0) return buildUrl(`/${route}/flows/${flows[0].data.id}/${flows[0].data.latestVersion}`);
  return buildUrl(defaultValue);
};

const navigationItems = [
  {
    id: '/',
    label: 'Home',
    icon: House,
    href: buildUrl('/'),
    current: currentPath === '/',
    sidebar: false,
  },
  {
    id: '/docs',
    label: 'Documentation',
    icon: BookOpenText,
    href: getDefaultUrl('docs', '/docs'),
    current: currentPath.includes('/docs'),
    sidebar: true,
  },
  {
    id: '/visualiser',
    label: 'Visualiser',
    icon: Workflow,
    href: getDefaultUrl('visualiser', '/visualiser'),
    current: currentPath.includes('/visualiser'),
    sidebar: true,
  },
  {
    id: '/discover',
    label: 'Explore',
    icon: TableProperties,
    href: buildUrl('/discover/events'),
    current: currentPath.includes('/discover/'),
    sidebar: false,
  },
];

const eventCatalogConfig = config as CatalogConfig;

const {
  services: servicesConfig,
  domains: domainsConfig,
  messages: messagesConfig,
  flows: flowsConfig,
  teams: teamsConfig,
  users: usersConfig,
} = eventCatalogConfig?.docs?.sidebar || {};

const getConfigValue = (obj: any, key: string, defaultValue: any) => {
  return obj?.[key] ?? defaultValue;
};

const visibleCollections: { [key: string]: boolean } = {
  events: getConfigValue(messagesConfig, 'visible', true),
  commands: getConfigValue(messagesConfig, 'visible', true),
  domains: getConfigValue(domainsConfig, 'visible', true),
  flows: getConfigValue(flowsConfig, 'visible', true),
  services: getConfigValue(servicesConfig, 'visible', true),
  teams: getConfigValue(teamsConfig, 'visible', true),
  users: getConfigValue(usersConfig, 'visible', true),
};

const sideNav = allData.reduce((acc, item) => {
  const title = item.collection;
  const group = acc[title] || [];
  const currentPath = Astro.url.pathname;
  const route = currentPath.includes('visualiser') ? 'visualiser' : 'docs';

  if (currentPath.includes('visualiser') && (item.collection === 'teams' || item.collection === 'users')) {
    return acc;
  }

  const navigationItem = {
    label: item.data.name,
    version: item.collection === 'teams' || item.collection === 'users' ? null : item.data.version,
    // items: item.collection === 'users' ? [] : item.headings,
    visible: visibleCollections[item.collection],
    // @ts-ignore
    href: item.data.version
      ? // @ts-ignore
        buildUrl(`/${route}/${item.collection}/${item.data.id}/${item.data.version}`)
      : buildUrl(`/${route}/${item.collection}/${item.data.id}`),
    collection: item.collection,
  };

  group.push(navigationItem);

  return {
    ...acc,
    [title]: group,
  };
}, {} as any);

const currentNavigationItem = navigationItems.find((item) => item.current);
const { title, description, sidebar: showSideBarOverride } = Astro.props;

const showSideBarOnLoad = currentNavigationItem?.sidebar;
---

<!doctype html>
<html lang="en">
  <head>
    <SEO title={`EventCatalog | ${title}`} description={description} ogTitle={title} />
    <style>
      .sidebar-transition {
        transition-property: width, transform;
        transition-duration: 300ms;
        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
      }
      .tooltip {
        visibility: hidden;
        position: absolute;
      }
      .has-tooltip:hover .tooltip {
        visibility: visible;
        z-index: 100;
      }
    </style>
  </head>
  <body>
    <Header />
    <div class="flex">
      <aside class="flex" id="eventcatalog-vertical-nav">
        <div
          class="fixed flex flex-col items-center w-16 h-screen py-4 bg-white bg-gradient-to-b from-white to-gray-100 border-r border-gray-200 z-20 shadow-md justify-between"
        >
          <nav class="flex flex-col h-[84vh] justify-between">
            <div class="flex flex-col items-center flex-1 space-y-8">
              {
                navigationItems.map((item) => {
                  return (
                    <a
                      id={item.id}
                      data-role="nav-item"
                      href={item.href}
                      class={`p-1.5 inline-block transition-colors duration-200 rounded-lg ${item.current ? 'text-white bg-gradient-to-b from-purple-500 to-purple-700' : 'hover:bg-gradient-to-r hover:from-purple-500 hover:to-purple-700 hover:text-white text-gray-700'}`}
                    >
                      <div class="has-tooltip">
                        <span class="tooltip rounded shadow-lg p-1 text-xs bg-gradient-to-l from-purple-500 to-purple-700 text-white ml-10">
                          {item.label}
                        </span>
                        <item.icon className="h-6 w-6  " />
                      </div>
                    </a>
                  );
                })
              }
            </div>
            <!-- <div class="flex flex-col items-center mt-4 space-y-4 -mb-10">
              <a href="https://discord.com/invite/3rjaZMmrAm" class="text-gray-500 has-tooltip">
                <span class="tooltip rounded shadow-lg p-1 text-xs bg-black text-white ml-10 w-[162px]"
                  >Join EventCatalog Discord</span
                >
                <img src="/icons/discord.svg" class="w-7 h-7" />
              </a>
              <a href="https://github.com/event-catalog/eventcatalog" class="text-gray-500 has-tooltip">
                <span class="tooltip rounded shadow-lg p-1 text-xs bg-black text-white ml-10 w-[175px]"
                  >Found an issue? Let us know</span
                >
                <img src="/icons/github-purple.svg" class="w-7 h-7" />
              </a>
            </div> -->
          </nav>
        </div>

        <div
          id="sidebar"
          class={`sidebar-transition h-[100vh]  max-h-screen px-5 py-4 overflow-y-auto bg-white bg-gradient-to-b from-white  to-gray-100 border-r border-gray-200 w-60 shadow-lg ml-16 ${showSideBarOnLoad ? 'block' : 'hidden'}`}
        >
          <CatalogResourcesSideBar resources={sideNav} currentPath={currentPath} client:load />
        </div>
      </aside>
      <main class={`sidebar-transition w-full max-h-screen ${showSideBarOnLoad ? 'ml-0' : 'ml-16'}`} id="content">
        <slot />
      </main>
    </div>
  </body>
</html>
<script define:vars={{ navigationItems, currentNavigationItem, showSideBarOnLoad }}>
  // Listen for Astro transititions
  document.addEventListener('astro:page-load', () => {
    document.dispatchEvent(new CustomEvent('contentLoaded'));
  });

  // Listen for DOM loaded
  document.addEventListener('DOMContentLoaded', () => {
    document.dispatchEvent(new CustomEvent('contentLoaded'));
  });

  document.addEventListener('contentLoaded', () => {
    const sidebar = document.getElementById('sidebar');
    const content = document.getElementById('content');
    const currentPath = window.location.href;

    // Hide the sidebar if the current navigation item is not a sidebar item
    if (!currentNavigationItem.sidebar || currentPath.includes('asyncapi') || currentPath.includes('/spec')) {
      sidebar.style.display = 'none';
      content.style.width = '100%';
      content.classList.add('ml-16');
    } else {
      sidebar.style.display = 'block';
    }

    const navItems = document.querySelectorAll('[data-role="nav-item"]');
    let isOpen = showSideBarOnLoad;

    navItems.forEach((item) => {
      item.addEventListener('click', (e) => {
        const currentPath = window.location.href;
        const id = item.getAttribute('id');

        const navItem = navigationItems.find((navItem) => navItem.id === id);

        console.log(navItem);

        if (!navItem.sidebar || !currentPath.includes(navItem.id)) {
          window.location.href = navItem.href;
          return;
        }

        // not on the target page then just go to it.
        if (!currentPath.includes(navItem.id)) return;

        if (currentPath.includes(navItem.id)) {
          e.preventDefault();
          if (isOpen) {
            hideSidebar();
          } else {
            showSidebar();
          }
        }
      });
    });

    function showSidebar() {
      if (!sidebar || !content) return;
      isOpen = true;
      localStorage.setItem('sidebarState', 'open');
      sidebar.style.display = 'block';
      setTimeout(() => {
        sidebar.style.transform = 'translateX(0)';
        content.style.transform = 'translateX(0)';
        content.classList.remove('ml-16');
        content.style.width = 'calc(100% - 240px)';
      }, 10);
    }

    function hideSidebar() {
      if (!sidebar || !content) return;
      isOpen = false;
      sidebar.style.transform = 'translateX(-100%)';
      content.style.transform = 'translateX(0px)';
      content.style.width = '100%';
      content.classList.add('ml-16');
    }

    if (sidebar) {
      sidebar.addEventListener('transitionend', () => {
        if (!isOpen && sidebar && content) {
          sidebar.style.display = 'none';
          content.style.transform = 'translateX(0px)';
        }
      });
    }
  });
</script>
